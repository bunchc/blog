<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Cody Bunch</title>
 <link href="http://lanyon.getpoole.com/atom.xml" rel="self"/>
 <link href="http://lanyon.getpoole.com/"/>
 <updated>2015-02-20T14:34:47-06:00</updated>
 <id>http://lanyon.getpoole.com</id>
 <author>
   <name>Cody Bunch</name>
   <email>bunchc@gmail.com</email>
 </author>

 
 <entry>
   <title>A Detour Into Camp Coffee</title>
   <link href="http://lanyon.getpoole.com/2015/02/20/A-Detour-Into-Camp-Coffee/"/>
   <updated>2015-02-20T00:00:00-06:00</updated>
   <id>http://lanyon.getpoole.com/2015/02/20/A-Detour-Into-Camp-Coffee</id>
   <content type="html">&lt;p&gt;What? Camp who?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/B91WL3nCQAAuegd.jpg:large&quot; alt=&quot;https://pbs.twimg.com/media/B91WL3nCQAAuegd.jpg:large&quot;&gt;&lt;/p&gt;

&lt;p&gt;I like coffee. A lot. As spring approaches, I am also gearing up to head back outdoors. Camping and coffee don&amp;#39;t always get along, however. That is, you can make some really good coffee when doing &amp;quot;plop and drop&amp;quot; camping, but if you&amp;#39;re reducing the amount of kit you carry, your options start to get really limited.&lt;/p&gt;

&lt;p&gt;With that in mind, I decided to take on the &amp;#39;Camp Coffee&amp;#39; problem by well... trying all the coffee. For Science!&lt;/p&gt;

&lt;h1&gt;Camp Coffee Showdown&lt;/h1&gt;

&lt;p&gt;There were about 6 rounds involved in this, ranging from instant to stove top. Each produced hugely different results and what follows are my experiences with each. You&amp;#39;ll note the &amp;#39;stove top&amp;#39; was used here, as conditions outside weren&amp;#39;t conducive to fire construction.&lt;/p&gt;

&lt;p&gt;The rounds:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Taster&amp;#39;s Choice&lt;/li&gt;
&lt;li&gt;Folgers Instant&lt;/li&gt;
&lt;li&gt;Starbucks VIA&lt;/li&gt;
&lt;li&gt;Percolator&lt;/li&gt;
&lt;li&gt;Cowboy / Turkish&lt;/li&gt;
&lt;li&gt;Mokka&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Before we get too deep into this, I left out some of the standard options, travel french press, aeropress, etc. While you can pack those, they&amp;#39;re also more or less known quantities / qualities.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Camp Coffee Round 1 - Taster&amp;#39;s Choice&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/B9QBP0bCUAA4E6M.jpg:large&quot; alt=&quot;https://pbs.twimg.com/media/B9QBP0bCUAA4E6M.jpg:large&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/B9QBPz1CUAAVQoT.jpg:large&quot; alt=&quot;https://pbs.twimg.com/media/B9QBPz1CUAAVQoT.jpg:large&quot;&gt;&lt;/p&gt;

&lt;p&gt;Yes it&amp;#39;s instant coffee. It is also everything that is wrong in the world, in the universe, all bundled up into one little package of crystallized hate. I mean, I suppose it&amp;#39;s coffee, if you like aromatic gym socks and hints of industrial cleanser. This was the only one in the round up to make me spit and pour it out as fast as I could.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quality&lt;/strong&gt;: None. There was no quality here. Unless you are trying to get an oil stain out of your driveway I guess.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trouble&lt;/strong&gt;: All of it. All the trouble.&lt;/p&gt;

&lt;h2&gt;Camp Coffee Round 2 - Folgers Instant&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/B9QD9tACEAEUmlt.jpg:large&quot; alt=&quot;https://pbs.twimg.com/media/B9QD9tACEAEUmlt.jpg:large&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/B9QD9sNCUAEoFrK.jpg:large&quot; alt=&quot;https://pbs.twimg.com/media/B9QD9sNCUAEoFrK.jpg:large&quot;&gt;&lt;/p&gt;

&lt;p&gt;This stuff is magic. That is, after the old armpit socks from the last round, it was amazing how much like Folgers this tasted. Not sure if that is a compliment or not, but well, it was tolerable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quality&lt;/strong&gt;: Only if I can&amp;#39;t find VIA&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trouble&lt;/strong&gt;: None&lt;/p&gt;

&lt;h2&gt;Camp Coffee Round 3 - Starbucks VIA&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/B9QGar9CUAANM3I.jpg:large&quot; alt=&quot;https://pbs.twimg.com/media/B9QGar9CUAANM3I.jpg:large&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/B9QGarvCQAA9O5U.jpg:large&quot; alt=&quot;https://pbs.twimg.com/media/B9QGarvCQAA9O5U.jpg:large&quot;&gt;&lt;/p&gt;

&lt;p&gt;Nothing fancy here. Hot water, Coffee Powder, Stir. It is the stir part that will get you. Unlike the other two &amp;#39;instant&amp;#39; coffees in the round up, this one uses a &amp;#39;micro-grind&amp;#39; of sorts. Like cowboy below, don&amp;#39;t drink the last sip.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quality&lt;/strong&gt;: Decent, bordering on good&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trouble&lt;/strong&gt;: None&lt;/p&gt;

&lt;h2&gt;Camp Coffee Round 4 - Percolator&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/B9QKdBgCAAEPYpw.jpg:large&quot; alt=&quot;https://pbs.twimg.com/media/B9QKdBgCAAEPYpw.jpg:large&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/B9QKdChCAAEidGd.jpg:large&quot; alt=&quot;https://pbs.twimg.com/media/B9QKdChCAAEidGd.jpg:large&quot;&gt;&lt;/p&gt;

&lt;p&gt;The coffee snob in me is almost ashamed of having done a percolated pot. Yes, it&amp;#39;s an American coffee staple. Yes, it&amp;#39;s what I grew up on. Yes, it brings back the memory of that amazing trip to Bear Den campground in North Carolina where I brewed my parents a cup of coffee, and completely forgot the water. Apparently one can burn coffee.&lt;/p&gt;

&lt;p&gt;The flip side of this is: I could totally see bringing a fire or stove top pot on a trip if I had a smaller one in my arsenal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quality&lt;/strong&gt;: Alright&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trouble&lt;/strong&gt;: Don&amp;#39;t forget the water.&lt;/p&gt;

&lt;h2&gt;Camp Coffee Round 5 - Cowboy / Turkish&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/B9QS9-JCUAIS70d.jpg:large&quot; alt=&quot;https://pbs.twimg.com/media/B9QS9-JCUAIS70d.jpg:large&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/B9QS9__CYAEgs2L.jpg:large&quot; alt=&quot;https://pbs.twimg.com/media/B9QS9__CYAEgs2L.jpg:large&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/B9QUlDhCIAEjnJR.jpg:large&quot; alt=&quot;https://pbs.twimg.com/media/B9QUlDhCIAEjnJR.jpg:large&quot;&gt;&lt;/p&gt;

&lt;p&gt;So I call this Cowboy rather than Turkish, as well, they&amp;#39;re prepared almost the same: powdered coffee grounds, boiled in the water a few times. The differentiation here, is that Turkish generally calls for an almost equal amount of sugar to go with it. Brewing it was fast, but it was still a bit of trouble that is, having to schlep the grinder and the little Turkish pot thing. It was also gritty as heck. The slurry at the bottom should only be consumed if you need real ultimate power.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quality&lt;/strong&gt;: Good&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trouble&lt;/strong&gt;: Medium&lt;/p&gt;

&lt;h2&gt;Camp Coffee Round 6 - Mokka&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/B9QVhy-CIAIf6qg.jpg&quot; alt=&quot;https://pbs.twimg.com/media/B9QVhy-CIAIf6qg.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/B9QVhyZCMAAJlzp.jpg&quot; alt=&quot;https://pbs.twimg.com/media/B9QVhyZCMAAJlzp.jpg&quot;&gt;&lt;/p&gt;

&lt;p&gt;The stove top Mokka pot. This along with the percolator in round 4 is how I grew up drinking coffee. At my grandfather&amp;#39;s house it&amp;#39;d be called &amp;quot;black&amp;quot; coffee and brought out around the holidays or when he was playing cards out by the pool with his buddies. It was often mixed with Sambuca around the holidays. I knew what to expect on this one. It was added to get an idea of the time vs trouble. It was a lot trouble, btw. Good for a plop and drop setup, but not so much if you need mobility.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quality&lt;/strong&gt;: Great&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trouble&lt;/strong&gt;: A lot&lt;/p&gt;

&lt;h1&gt;Camp Coffee Summary&lt;/h1&gt;

&lt;p&gt;Let it not be said there are not consequences to drinking 6 cups of coffee in less than an hour. With that, I&amp;#39;ll likely go this season with either an Aeropress, Cowboy, or Via depending on packing requirements.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Basic Server Hardening with Salt</title>
   <link href="http://lanyon.getpoole.com/2015/01/09/Basic-Server-Hardening-with-Salt/"/>
   <updated>2015-01-09T00:00:00-06:00</updated>
   <id>http://lanyon.getpoole.com/2015/01/09/Basic-Server-Hardening-with-Salt</id>
   <content type="html">&lt;p&gt;Before we get started, take a gander at my last few posts on this, &lt;a href=&quot;http://openstack.prov12n.com/basic-hardening-part-2-using-heat-templates/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;http://openstack.prov12n.com/basic-hardening-with-user-data-cloud-init/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The idea here is roughly the same. That is, build a small, basic &amp;#39;base&amp;#39; profile, template, state, or whatever, that has some simple hardening bits applied. The idea being to give you a reasonable start in turn letting you apply additional layers down the road.&lt;/p&gt;

&lt;p&gt;The reason you&amp;#39;d move away from doing this with OpenStack Orchestration (Heat) and into a config management tool is that it allows you to apply the same practices more generically. That is not everyone runs OpenStack, but lots of folks are moving to some flavor of configuration management tool, if they weren&amp;#39;t there already. You can then include these SaltStates in Heat or whatever orchestration tool of choice.&lt;/p&gt;

&lt;h2&gt;Basic Hardening with SaltStack&lt;/h2&gt;

&lt;p&gt;For the sake of not making this a &lt;em&gt;huge-tastic&lt;/em&gt; blog post, we&amp;#39;ll skip the part where I explain the what and how of getting started with SaltStack. Many others have done better than I. What follows is my top.sls, secureserver.sls and sysctl.sys files.&lt;/p&gt;

&lt;h3&gt;top.sls&lt;/h3&gt;

&lt;p&gt;This file controls what Salt minions get what &amp;#39;states&amp;#39;. For securing &lt;em&gt;all&lt;/em&gt; the servers, that&amp;#39;s pretty straight forward. I would like to call out, however, the ordering of the states:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;base:
  &amp;#39;*&amp;#39;:
    - sysctl
    - secureserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This defines a &amp;#39;base&amp;#39; state that will match for all Salt minions. (Minion is Salt for agent.) It then states to apply first the sysctl state, then the secureserver state.&lt;/p&gt;

&lt;h3&gt;sysctl.sls&lt;/h3&gt;

&lt;p&gt;There isn&amp;#39;t much fancy to this file. In fact, it&amp;#39;s more or less a YAML formatted version of what you&amp;#39;d throw into &lt;code&gt;/etc/sysctl.conf&lt;/code&gt;. What the lines below do is turn off IP routing, ignore broadcasts, responses, and all manner of other fun icmp stuff.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;net.ipv4.icmp_echo_ignore_broadcasts:
  sysctl.present:
    - value: 1

net.ipv4.icmp_ignore_bogus_error_responses:
  sysctl.present:
  - value: 1

net.ipv4.tcp_syncookies:
  sysctl.present:
    - value: 1

net.ipv4.conf.all.log_martians:
  sysctl.present:
  - value: 1

net.ipv4.conf.default.log_martians:
  sysctl.present:
    - value: 1

net.ipv4.conf.all.accept_source_route:
  sysctl.present:
    - value: 0

net.ipv4.conf.default.accept_source_route:
  sysctl.present:
    - value: 0

net.ipv4.conf.all.rp_filter:
  sysctl.present:
    - value: 1

net.ipv4.conf.default.rp_filter:
  sysctl.present:
    - value: 1

net.ipv4.conf.all.accept_redirects:
  sysctl.present:
    - value: 0

net.ipv4.conf.default.accept_redirects:
  sysctl.present:
    - value: 0

net.ipv4.conf.all.secure_redirects:
  sysctl.present:
    - value: 0

net.ipv4.conf.default.secure_redirects:
  sysctl.present:
    - value: 0

net.ipv4.ip_forward:
  sysctl.present:
    - value: 0

net.ipv4.conf.all.send_redirects:
    sysctl.present:
    - value: 0

net.ipv4.conf.default.send_redirects:
  sysctl.present:
    - value: 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;secureserver.sls&lt;/h3&gt;

&lt;p&gt;This file, unlike the sysctl bits, actually does some install and config bits. If you&amp;#39;ve read the post I mentioned at the beginning of this post, you&amp;#39;ll recognize the packages being installed.&lt;/p&gt;

&lt;p&gt;The configure bits are two fold: 1) We configure logwatch using a file hosted on the Salt master; 2) We configure IP tables to allow ssh and deny all the other things:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;iptables:
  pkg:
    - installed

denyhosts:
  pkg:
    - installed

psad:
  pkg:
    - installed

fail2ban:
  pkg:
    - installed

logwatch:
  pkg:
    - installed

aide:
  pkg:
    - installed

/etc/cron.daily/00logwatch:
  file:
    - managed
    - source: salt://cron.daily/00logwatch
    - require:
      - pkg: logwatch

ssh:
  iptables.append:
    - table: filter
    - chain: INPUT
    - jump: ACCEPT
    - match: state
    - connstate: NEW
    - dport: 22
    - proto: tcp
    - sport: 1025:65535
    - save: True

allow established:
  iptables.append:
    - table: filter
    - chain: INPUT
    - match: state
    - connstate: ESTABLISHED
    - jump: ACCEPT

default to reject:
  iptables.append:
    - table: filter
    - chain: INPUT
    - jump: REJECT
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post we&amp;#39;ve covered how to do some very very basic hardening of your server using SaltStack. This likely wont work for all circumstances (like if you&amp;#39;re going to actually run nginx or apache, you need to add those ports accordingly).&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.thefanclub.co.za/how-to/how-secure-ubuntu-1204-lts-server-part-1-basics&quot;&gt;https://www.thefanclub.co.za/how-to/how-secure-ubuntu-1204-lts-server-part-1-basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://openstack.prov12n.com/basic-hardening-with-user-data-cloud-init/&quot;&gt;http://openstack.prov12n.com/basic-hardening-with-user-data-cloud-init/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://plusbryan.com/my-first-5-minutes-on-a-server-or-essential-security-for-linux-servers&quot;&gt;http://plusbryan.com/my-first-5-minutes-on-a-server-or-essential-security-for-linux-servers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.softpanorama.org/Net/Transport_layer/hardening_tcp_stack_in_linux.shtml&quot;&gt;http://www.softpanorama.org/Net/Transport&lt;em&gt;layer/hardening&lt;/em&gt;tcp&lt;em&gt;stack&lt;/em&gt;in_linux.shtml&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.saltstack.com/en/latest/ref/states/all/salt.states.sysctl.html&quot;&gt;http://docs.saltstack.com/en/latest/ref/states/all/salt.states.sysctl.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.ssh.html&quot;&gt;http://docs.saltstack.com/en/latest/ref/modules/all/salt.modules.ssh.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://linuxconfig.org/collection-of-basic-linux-firewall-iptables-rules&quot;&gt;http://linuxconfig.org/collection-of-basic-linux-firewall-iptables-rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.saltstack.com/en/latest/ref/states/all/salt.states.iptables.html&quot;&gt;http://docs.saltstack.com/en/latest/ref/states/all/salt.states.iptables.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Link Dump - Random Edition</title>
   <link href="http://lanyon.getpoole.com/2015/01/08/Link-Dump---Random-Edition/"/>
   <updated>2015-01-08T00:00:00-06:00</updated>
   <id>http://lanyon.getpoole.com/2015/01/08/Link-Dump---Random-Edition</id>
   <content type="html">&lt;p&gt;Today&amp;#39;s link dump is brought to you by Google Chrome and my poor swap file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/prakhar1989/awesome-courses&quot;&gt;Things to do in 2015 (Comp Sci Learnings)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dcg.ethz.ch/lectures/podc_allstars/lecture/podc.pdf&quot;&gt;Principals of Distributed Computing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.hpcs.cs.tsukuba.ac.jp/%7Etatebe/lecture/h23/dsys/dsd-tutorial.html&quot;&gt;Google Distributed Systems Class / Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cs.cornell.edu/Courses/CS5412/2014sp/Syllabus.htm&quot;&gt;Some Distributed systems slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Guide-Reliable-Distributed-Systems-High-Assurance/dp/1447124154&quot;&gt;Guide to Reliable Distributed Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sophron/wifiphisher&quot;&gt;Wifi Phisher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/xiam/hyperfox&quot;&gt;Hyperfox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/buffer/thug&quot;&gt;Thug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bruteforce.gr/&quot;&gt;Some cool projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.technologyreview.com/twelvetomorrows/14/&quot;&gt;Twelve Tomorrows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>On OpenStack 2015 Board Elections</title>
   <link href="http://lanyon.getpoole.com/2015/01/07/On-OpenStack-2015-Board-Elections/"/>
   <updated>2015-01-07T00:00:00-06:00</updated>
   <id>http://lanyon.getpoole.com/2015/01/07/On-OpenStack-2015-Board-Elections</id>
   <content type="html">&lt;p&gt;Sometime back in November, I received an email stating that I had been nominated, by the OpenStack community, to run for an Individual Board Member position. It was very shortly thereafter I had the 10 needed nominations to get on the ballot. I was super excited at the prospect, and am super humbled that I&amp;#39;d even be considered.&lt;/p&gt;

&lt;p&gt;Let me say that again. I am incredibly humbled that the community reached out and hopped on to support my nomination.&lt;/p&gt;

&lt;p&gt;I repeat that, because at this time, I&amp;#39;m deciding to back out of the election for two reasons. First and foremost, family considerations. Due to unforeseen family circumstances, I need to take a few steps back from the various things I am involved in for a while.&lt;/p&gt;

&lt;p&gt;My second reason for backing out, is the entry of &lt;a href=&quot;http://www.openstack.org/community/members/profile/3106&quot;&gt;Egle&lt;/a&gt; (&lt;a href=&quot;https://twitter.com/eglute&quot;&gt;@eglute&lt;/a&gt; | &lt;a href=&quot;http://anystacker.com/&quot;&gt;AnyStacker&lt;/a&gt;) into the elections. Having worked closely with Egle on a number of workshops, books, and work projects over the last few years, I can say that y&amp;#39;all will be in great hands if she&amp;#39;s elected.&lt;/p&gt;

&lt;p&gt;Thank you again for your all your support. Mayhaps next time.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Unbreak Email in 2015: 3 folders, 2 times a day, 1 rule</title>
   <link href="http://lanyon.getpoole.com/2014/12/30/Unbreak-Email-3-folders-2-times-a-day-1-rule/"/>
   <updated>2014-12-30T00:00:00-06:00</updated>
   <id>http://lanyon.getpoole.com/2014/12/30/Unbreak-Email-3-folders-2-times-a-day-1-rule</id>
   <content type="html">&lt;p&gt;With the new year upon us, a lot of you will likely make some manner of commitment to be better at handling communications, process email, and in general, get things done.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a system I&amp;#39;ve built / adapted from others who are much more effective at email than I am. The system in general has helped reduce stress and help me focus on and engage better with the parts of email that matter. Because I am lazy, it&amp;#39;s also super simple and automated to a degree. I am not prescribing this as a fix to all of your email woes, rather, suggesting that like me, you read, learn, and adapt it to help improve how you handle email next year. (&lt;em&gt;ZOMG RUNON&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;It&amp;#39;s got some basic components, and because lists are a good SEO / Click-Bait thing, that&amp;#39;s how we&amp;#39;ll arrange it:&lt;/p&gt;

&lt;h1&gt;Unbreak Email&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;3 Folders&lt;/li&gt;
&lt;li&gt;2 Times a day&lt;/li&gt;
&lt;li&gt;1 Processing Rule&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;3 Folders&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s actually two for processing and one for storing reference material. These folders are:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;-&amp;gt; Inbox
|-&amp;gt; I&amp;#39;m Awesome
|-&amp;gt; Done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The basic workflow is that everything lands in the inbox, and gets processed into either the &amp;quot;I&amp;#39;m Awesome&amp;quot; (or Kudos, etc) folder or into the Done folder.&lt;/p&gt;

&lt;p&gt;What is this &amp;quot;I&amp;#39;m Awesome&amp;quot; folder? It actually serves a few needs. &lt;/p&gt;

&lt;p&gt;First and foremost it&amp;#39;s a tool to be used around review time. That is, you take any email where someone thanks you for a job well done, a contribution to a project, and other similar things, and place them here. If you do self-reviews, retrospectives, or other similar management things, it is handy to have this as a reminder of the contributions you&amp;#39;ve made over that time period, and if need be, remind &lt;em&gt;The Man™&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Second, and no less important, is this folders ability to recharge your batteries. If you start to experience burn out, feel like you aren&amp;#39;t having an impact, and other similar feelings, looking back at this folder should remind you a bit about why you do what you do.&lt;/p&gt;

&lt;h2&gt;2 Times A Day&lt;/h2&gt;

&lt;p&gt;I generally check email twice a day. That is, across all accounts (gmail, provmware, work, etc). Twice a day.&lt;/p&gt;

&lt;p&gt;This isn&amp;#39;t a hard and fast rule. That is, emergencies and other high priority things happen in life that necessitate checking with more frequency.&lt;/p&gt;

&lt;p&gt;For things like collaboration, team communication, social, and more, there are more and better, near instant forms of communication.&lt;/p&gt;

&lt;p&gt;During these processing times, process the &amp;quot;Inbox&amp;quot; folder first, as this contains everything that is addressed to me, or needs input. Giving these priority let&amp;#39;s you address the 20% of email that needs 80% of your attention.&lt;/p&gt;

&lt;p&gt;Next, process the &amp;quot;Done&amp;quot; folder which will contain mostly automated emails and email list mails. In this case, the &amp;quot;One Rule&amp;quot; discussed next puts anything and everything that is not addressed directly to you into the Done folder. This is because in the majority of circumstances, mail coming to an email list or from an automated source is informative, but not of major consequence if missed or filed as &amp;quot;Done&amp;quot;.&lt;/p&gt;

&lt;p&gt;As these emails in this folder are largely informative in nature, skimming them has worked well for me. Skimming strategies however, are best left for another post (or some manner of productivity expert).&lt;/p&gt;

&lt;h2&gt;1 Email Rule&lt;/h2&gt;

&lt;p&gt;The 1 rule to rule them all that I use to support all of the above:&lt;/p&gt;

&lt;p&gt;&amp;quot;On incoming mail, where I am not in the TO: or CC: field, move to &amp;#39;Done&amp;#39;&amp;quot;.&lt;/p&gt;

&lt;p&gt;This enables the bits above, and in one fell swoop, will reduce your load significantly.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Holiday Zen Moments</title>
   <link href="http://lanyon.getpoole.com/2014/12/26/Holiday-Zen-Moments/"/>
   <updated>2014-12-26T00:00:00-06:00</updated>
   <id>http://lanyon.getpoole.com/2014/12/26/Holiday-Zen-Moments</id>
   <content type="html">&lt;p&gt;Apologies in advance if this is a bit more personal than technical. There is plenty more tech content coming, have no fear.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/iT7TOPI.jpg&quot; alt=&quot;I ride because I ride&quot;&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s the holidays WOOOOO! Well, maybe no seven O&amp;#39;s woo, but still, a good time nevertheless. On the Zen moments thing, about 6 years ago, my father told me &lt;a href=&quot;http://commuteorlando.com/wordpress/2009/02/03/a-zen-master-asks-why-ride-a-bicycle/&quot;&gt;this story&lt;/a&gt;, and designed the sticker you see above.&lt;/p&gt;

&lt;p&gt;The story:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Five students of a Zen master was back from the market on their bicycles. As they dismounted, their master asked: &amp;quot;Why are you riding your bicycles?” &lt;/p&gt;

&lt;p&gt;Each of them came up with different answers to their master’s query. &lt;/p&gt;

&lt;p&gt;The first student said: “It is the bicycle that is carrying the sack of potatoes. I am glad that my back has escaped the pain of bearing the weight.”&lt;/p&gt;

&lt;p&gt;The master was glad and said: ”You are a smart boy. When you become old you will be saved of a hunch back unlike me.” &lt;/p&gt;

&lt;p&gt;The second student had a different answer: ”I love to have my eyes over the trees and the sprawling fields as I go riding.” &lt;/p&gt;

&lt;p&gt;The teacher commended: “You have your eyes open and you see the world.” &lt;/p&gt;

&lt;p&gt;The third disciple came up with yet a different answer: ”When I ride I am content to chant ‘nam myoho renge kyo’”&lt;/p&gt;

&lt;p&gt;The master spoke words of appreciation: ”Your mind will roll with ease like a newly trued wheel.”&lt;/p&gt;

&lt;p&gt;The fourth disciple said: “Riding my bicycle I live in perfect harmony of things.” &lt;/p&gt;

&lt;p&gt;The pleased master said: ”You are actually riding the golden path of non-harming or non violence.”&lt;/p&gt;

&lt;p&gt;The fifth student said: ”I ride my bicycle to ride my bicycle.”&lt;/p&gt;

&lt;p&gt;The master walked up to him and sat at his feet and said: “I am your disciple!”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Having ridden a bicycle for a number of years, I have used it for various means and in various phases. Weight-loss, transportation, racing, harmony with nature, etc. However, over the last several years through varied events, dramas and the like, I have learned that in cycling: &amp;quot;I ride because I ride&amp;quot;.&lt;/p&gt;

&lt;p&gt;During the holidays, one can get caught up in the presents, people, dramas, and the ever present exhaustion of well, the holidays. Over the years, I&amp;#39;ve been in all of the above situations and then some. This year, like in cycling, I am trying to &amp;quot;Holidays because I Holidays&amp;quot;.&lt;/p&gt;

&lt;p&gt;Regardless of how, what, or why you get together this season, try to take a moment, sit back and enjoy them as much as you can.&lt;/p&gt;

&lt;p&gt;If you also ride because you ride, and would like a sticker, either email me (bunchc at gmail) or ping me on twitter and we can arrange something.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Live Blog - Keystone to Keystone Federation</title>
   <link href="http://lanyon.getpoole.com/2014/11/05/Live-Blog---Keystone-to-Keystone-Federation/"/>
   <updated>2014-11-05T00:00:00-06:00</updated>
   <id>http://lanyon.getpoole.com/2014/11/05/Live-Blog---Keystone-to-Keystone-Federation</id>
   <content type="html">&lt;p&gt;Session details &lt;a href=&quot;https://openstacksummitnovember2014paris.sched.org/event/f7207fef7547319f322fa5cfee05cf49&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Speakers: 
- Marek Denis - Research Fellow, CERN 
- Steve Martinelli - Software Developer, IBM
- Joe Savak Sr. - Product Manager, Rackspace
- Brad Topol - Distinguished Engineer, IBM&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this presentation, we describe the federated identity enhancements we have added to support Keystone to Keystone federation for enabling hybrid cloud functionality. We begin with an overview of key hybrid cloud use cases that have been identified by our stakeholders including those being encountered by OpenStack superuser CERN. We then discuss our SAML based approach for enabling Keystones to trust each other and provide authorization and  role support for resources in hybrid cloud environments.   &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Live Blog&lt;/h2&gt;

&lt;p&gt;Lots of different folks interested in identity federtion, Academia, companies, lots and lots of folks.&lt;/p&gt;

&lt;p&gt;Use cases? - Easy to confiture, cloud bursting, central policy point, federating out, federating in. Keep the client small. No new protocols.&lt;/p&gt;

&lt;p&gt;&amp;quot;Federate In&amp;quot; - You already have identity provider, SAML, etc Folks already have SSO / Identity. Federate allows for use of existing credentials to work with OpenStack MSP&amp;#39;s.&lt;/p&gt;

&lt;p&gt;&amp;quot;Federate Out&amp;quot; - That is, you setup a trust between on prem and off prem clouds.&lt;/p&gt;

&lt;p&gt;Cern&amp;#39;s Use-Case&lt;/p&gt;

&lt;p&gt;Cern has 70,000 cores, they need more to process ALL the data they produce. This requires federation out allows folks to use pay-as-you-go to hire out additional resources as needed.&lt;/p&gt;

&lt;p&gt;Cern also needs to be able to allow folks to federate in from others in science community.&lt;/p&gt;

&lt;p&gt;Now an interlude for Keystone classic Auth.&lt;/p&gt;

&lt;p&gt;Federated identity in Incehouse - Integrate existing tools, SAML, etc. There is a diagram, it has lots of arrows, the gist is you send SAML to keystone, keystone gives you a token, and things are good. This worked, but not as well as it could. Mapping engine, that is, groups in one system are not the same as groups in others. Woo Mapping: &amp;quot;IBM Regular Employees&amp;quot; --&amp;gt; &amp;quot;regular_canada&amp;quot; etc.&lt;/p&gt;

&lt;p&gt;New diagram for Federation in Juno. A lot more arrows. This time around, Keystone is the provider, and will provide some level of attestation to the other Keystone in the trust relationship. Once the trust is in place, the user passes the token to either.&lt;/p&gt;

&lt;p&gt;The SAML generator takes the token and goes backwards. Token --&amp;gt; SAML Generator --&amp;gt; SAML Assertion&lt;/p&gt;

&lt;p&gt;Now we&amp;#39;re at a slide covering all manner of config data. Important bits: Mapping is still a thing. You also need to &amp;#39;prime&amp;#39; the SAML assertion pump.&lt;/p&gt;

&lt;p&gt;keystone-manage now has a metadata generation thing.&lt;/p&gt;

&lt;p&gt;Back to Cern: - 2 datacenters, OpenStack Cells, Cells not popular. 40k users in AD, and 12k more ADFS (Federation). Cern uses SAML2, and will be the first OpenStack in the world to allow federate-in to allow external entities to consume their resources.&lt;/p&gt;

&lt;p&gt;Patches to the OpenStack and Keystone clients.&lt;/p&gt;

&lt;p&gt;Looking forward:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Auth-N&lt;/li&gt;
&lt;li&gt;Horizon Integration&lt;/li&gt;
&lt;li&gt;More &amp;amp; Better Mapping&lt;/li&gt;
&lt;li&gt;Fine Grained ACLs&lt;/li&gt;
&lt;li&gt;More protocols&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Live Blog - Cloud Security: Do you know where your workloads are running?</title>
   <link href="http://lanyon.getpoole.com/2014/11/05/Live-Blog---Cloud-Security-Do-you-know-where-your-workloads-are-running/"/>
   <updated>2014-11-05T00:00:00-06:00</updated>
   <id>http://lanyon.getpoole.com/2014/11/05/Live-Blog---Cloud-Security-Do-you-know-where-your-workloads-are-running</id>
   <content type="html">&lt;p&gt;Session background can be found &lt;a href=&quot;https://openstacksummitnovember2014paris.sched.org/event/98e55a657e2e78e8beacaaacde714a0f&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Speaker: Raghu Yeluri, Intel Corporation&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As an Enterprise and/or a Cloud service provider, you would have to ensure that all regulatory requirements for workload and data sovereignty are met.   You have to answer the questions from your customers like:&lt;/p&gt;

&lt;p&gt;where is my workload running? ,  Are my workloads running in a compliant location? ,  How can I trust the Integrity of the host servers on which my workloads are running , can you prove to me that my workloads and data have not violated policies? , How can I control via policy where my workload can and cannot migrate and run .&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Live Blog&lt;/h2&gt;

&lt;p&gt;Geo Tag / Asset tags are set in a write once area. Can be almost anything, user provided names, gps coordinates, actual asset tags, and importantly, the certificate of attestation from the TPM.&lt;/p&gt;

&lt;p&gt;Today we&amp;#39;re using Glance Image Registry to set the launch properties / policies: e.g. Only runs in France. The &amp;quot;Trust and Launch&amp;quot; scheduler filter runs last against the list of servers left. It then runs a variant of Open Attestation to say, &amp;quot;Which are trusted?&amp;quot;. From there, the scheduler will deploy. This is all automatic. Only setting the tags is manual. This same attestation happens during migrations as well.&lt;/p&gt;

&lt;p&gt;This is how we enable boundary control. We added Horizon plugins to support launch policies. Extended Nova scheduler for location filtering, and glance for policies. Finally we provide a number of tools that work in conjunction (OAT, etc). The end-to-end bits can be done entirely in OSS however.&lt;/p&gt;

&lt;p&gt;This should be upstream in Kilo, however, we (Intel) provide scripts to make this work in Icehouse &amp;amp; Juno.&lt;/p&gt;

&lt;p&gt;Live Demo - Lol WiFi!&lt;/p&gt;

&lt;p&gt;There is no maximum number of tags that can be set, things like GEO, PCI-DSS, etc can be set, these are then used to select the servers from there.&lt;/p&gt;

&lt;p&gt;Magic number of policies: 5. This was in conversation with NIST and MSP&amp;#39;s&lt;/p&gt;

&lt;p&gt;Looking forward:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Extend geo-tagging for volumes&lt;/li&gt;
&lt;li&gt;Tenant-controlled encryption / decryption under controlled circumstances&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Extend geo-tagging for volumes - Basically the above but for Cinder. The scheduler is pluggable, so we should be able to make this happen. The assumption being x86 storage host. This will be more difficult with traditional SAN/NAS due to not being TXT enabled... &lt;em&gt;yet&lt;/em&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Paris Summit - Day 2</title>
   <link href="http://lanyon.getpoole.com/2014/11/04/Paris-Summit---Day-2/"/>
   <updated>2014-11-04T00:00:00-06:00</updated>
   <id>http://lanyon.getpoole.com/2014/11/04/Paris-Summit---Day-2</id>
   <content type="html">&lt;p&gt;Day number 2, Day number 2! He touched the cloud!&lt;/p&gt;

&lt;h2&gt;#vBrownBag Day 2&lt;/h2&gt;

&lt;p&gt;Day number 2 had a number of awesome #vBrownBag tech talks, one can find that playlist &lt;a href=&quot;https://www.youtube.com/channel/UCaZf13iWhwnBdpIkrEmHLbA&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;ZeroVM Sessions&lt;/h2&gt;

&lt;p&gt;We had a mini track going yesterday afternoon starting at 3:40 with &lt;a href=&quot;http://cczona.com/&quot;&gt;Carina C. Zona&lt;/a&gt; kicking it off with &amp;quot;Good, Fast, Cheap: Pick 3&amp;quot;. The 4:40 session right on the heels was a 90minute hands on workshop with ZeroCloud, or that sweet spot where ZeroVM meets OpenStack Swift. The recordings / slides for these are not yet available however. If you would like to try your hands at the workshop, you should be able to with the info from &lt;a href=&quot;http://blog.codybunch.com/posts/2014-10-29-Paris-Summit-Preparation/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Other notes from Day 2&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ZOMG The food in Paris.&lt;/li&gt;
&lt;li&gt;ZOMG The deserts in Paris.&lt;/li&gt;
&lt;li&gt;If the waiter tells you no, he means it.&lt;/li&gt;
&lt;li&gt;Sausage that says &amp;lt;&lt;AAAAA&gt;&amp;gt; is not your friend.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>OpenStack Cookbook - Now on Juno</title>
   <link href="http://lanyon.getpoole.com/2014/11/04/OpenStack-Cookbook---Now-on-Juno/"/>
   <updated>2014-11-04T00:00:00-06:00</updated>
   <id>http://lanyon.getpoole.com/2014/11/04/OpenStack-Cookbook---Now-on-Juno</id>
   <content type="html">&lt;p&gt;With the summit this week, I feel it&amp;#39;s appropriate to announce that the &lt;a href=&quot;https://github.com/openstackcookbook/openstackcookbook/tree/juno&quot;&gt;scripts supporting the OpenStack Cookbook&lt;/a&gt; have been updated (and are mostly functional) on OpenStack Juno.&lt;/p&gt;

&lt;p&gt;To get started with them, you&amp;#39;ll need either VMware Workstation/Fusion or Virtualbox, Vagrant, and Git.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git clone https://github.com/openstackcookbook/openstackcookbook -b juno
cd openstackcookbook
vagrant up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These scripts will be updated and expanded once again as we being writing on the third edition of the OpenStack Cookbook.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Paris Summit - Day 1</title>
   <link href="http://lanyon.getpoole.com/2014/11/03/Paris-Summit---Day-1/"/>
   <updated>2014-11-03T00:00:00-06:00</updated>
   <id>http://lanyon.getpoole.com/2014/11/03/Paris-Summit---Day-1</id>
   <content type="html">&lt;p&gt;Hooray Paris!&lt;/p&gt;

&lt;p&gt;Well, maybe. Having only seen the inside of the conference center and hotel lobby of the hotel nextdoor, I didn&amp;#39;t get to do much summiting today. Rather, the day was spent prepping for tomorrows workshop.&lt;/p&gt;

&lt;p&gt;I do hear that the #vBrownBags are doing extremely well with 19 individual sessions recorded (and streamed?) today, and a &lt;a href=&quot;http://openstack.prov12n.com/vbrownbag-techtalk-schedule-at-openstack-summit-paris-2/&quot;&gt;full schedule&lt;/a&gt; of 100-ish more this week.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Clone all the USB keys! - Method 3</title>
   <link href="http://lanyon.getpoole.com/2014/11/03/Clone-all-the-USB-keys---Method-3/"/>
   <updated>2014-11-03T00:00:00-06:00</updated>
   <id>http://lanyon.getpoole.com/2014/11/03/Clone-all-the-USB-keys---Method-3</id>
   <content type="html">&lt;p&gt;Method 3 you ask? Wel, sure, I &lt;a href=&quot;http://openstack.prov12n.com/usb-key-duplication-on-osx-on-the-cheap/&quot;&gt;wrote on this around&lt;/a&gt; the time of OSCON earlier this year. However, for the OpenStack in Paris, we needed a larger axe. Thanks to &lt;a href=&quot;https://twitter.com/larsbutler&quot;&gt;Lars&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://github.com/cloudnull&quot;&gt;Mr. Cloud Null&lt;/a&gt;, we managed to apply the appropriate amount of strategic violence:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cat ~/fuckshitup.sh
#!/bin/bash
set -e -o -v

for i in `jot 19 3`;
    do sudo diskutil erasedisk FAT32 PARIS /dev/disk${i}
done

for i in `jot 19 3`;
    do sudo diskutil partitionDisk /dev/disk${i} MBR MS-DOS PARIS 0b
done

for i in `jot 19 3`;
    do rsync --progress -az /Volumes/PARIS &amp;quot;/Volumes/PARIS $i/&amp;quot; &amp;amp;
done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First it formats all the disks, then it rsyncs all the things.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>OpenStack Book Discounts During Summit</title>
   <link href="http://lanyon.getpoole.com/2014/10/31/OpenStack-Book-Discounts-During-Summit/"/>
   <updated>2014-10-31T00:00:00-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/10/31/OpenStack-Book-Discounts-During-Summit</id>
   <content type="html">&lt;p&gt;Starting now and running the week of the summit, the two best selling OpenStack books will be on super sale:&lt;/p&gt;

&lt;h2&gt;OpenStack Cookbook&lt;/h2&gt;

&lt;p&gt;Book : nieX72Mn7U&lt;/p&gt;

&lt;p&gt;eBook: k1QxrwyMvD&lt;/p&gt;

&lt;h2&gt;Learning OpenStack Networking (Neutron)&lt;/h2&gt;

&lt;p&gt;Book : luyLRpSQ&lt;/p&gt;

&lt;p&gt;eBook: IXQ1swn2&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Paris Summit Preparation</title>
   <link href="http://lanyon.getpoole.com/2014/10/29/Paris-Summit-Preparation/"/>
   <updated>2014-10-29T00:00:00-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/10/29/Paris-Summit-Preparation</id>
   <content type="html">&lt;p&gt;As you might have guessed from the large number of ZeroVM posts recently, that something was up. If you are going to be at the OpenStack Summit in Paris, there will be a ZeroVM workshop given by my coworkers &lt;a href=&quot;https://twitter.com/eglute&quot;&gt;Egle&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/larsbutler&quot;&gt;Lars&lt;/a&gt;, and I.&lt;/p&gt;

&lt;p&gt;This session will be a 90-minute, into the deep end, building applications to work with ZeroVM.&lt;/p&gt;

&lt;p&gt;The materials, if you want to play along at home, can be found here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://4d01a92196a72e3b4215-657ddb0c96a24057e840f50c14fc13dd.ssl.cf1.rackcdn.com/ZeroCloud_Demo-07.ova&quot;&gt;The ZeroCloud Appliance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.zerovm.org/zerocloud/snakebin/snakebin.html&quot;&gt;The Online copy of the workshop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Still missing are the slides and video which I will update the post with after the show. See you in Paris.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Using Packer to Make Vagrant Boxes</title>
   <link href="http://lanyon.getpoole.com/2014/10/28/Using-Packer-to-Make-Vagrant-Boxes/"/>
   <updated>2014-10-28T00:00:00-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/10/28/Using-Packer-to-Make-Vagrant-Boxes</id>
   <content type="html">&lt;p&gt;Part of working on the 3rd edition of the OpenStack Cookbook required, among other things, a new release of Ubuntu that came pre-loaded with the Juno OpenStack packages. Not a problem! Excepting that there were no ready made images on &lt;a href=&quot;http://vagrantcloud.com&quot;&gt;Vagrant Cloud&lt;/a&gt;. Enter Packer.&lt;/p&gt;

&lt;h2&gt;Packer?&lt;/h2&gt;

&lt;p&gt;What the deuce is packer? From the &lt;a href=&quot;https://packer.io/&quot;&gt;packer.io&lt;/a&gt; site:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Packer is a tool for creating identical machine images for multiple platforms from a single source configuration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Said another way, it takes the &amp;#39;configuration is code&amp;#39; and pushes it back to the golden images, to a degree. The idea is one can shrink the time to deploy if instead of starting with the most generic box and adding, you start somewhere in the middle, adding common things to a &amp;#39;golden&amp;#39; image, and then deploying on top of that.&lt;/p&gt;

&lt;p&gt;In the use-case for the OpenStack Cookbook? Well, we just needed a manila Ubuntu 14.10 box for Fusion and Virtualbox. As there are three of us on the project now, having a common starting ground is ideal.&lt;/p&gt;

&lt;h2&gt;Our Packer Setup&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ll leave installing Packer as an exercise for the reader. The &lt;a href=&quot;https://packer.io/docs&quot;&gt;docs&lt;/a&gt; are pretty good in the regard.&lt;/p&gt;

&lt;p&gt;For our build, we use the following packer.json:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{
  &amp;quot;builders&amp;quot;: [
    {&amp;quot;type&amp;quot;: &amp;quot;virtualbox-iso&amp;quot;,
    &amp;quot;guest_os_type&amp;quot;: &amp;quot;Ubuntu_64&amp;quot;,
    &amp;quot;iso_url&amp;quot;: &amp;quot;http://mirror.anl.gov/pub/ubuntu-iso/CDs/utopic/ubuntu-14.10-server-amd64.iso&amp;quot;,
    &amp;quot;iso_checksum&amp;quot;: &amp;quot;91bd1cfba65417bfa04567e4f64b5c55&amp;quot;,
    &amp;quot;iso_checksum_type&amp;quot;:&amp;quot;md5&amp;quot;,
    &amp;quot;http_directory&amp;quot;: &amp;quot;preseed&amp;quot;,
    &amp;quot;ssh_username&amp;quot;: &amp;quot;vagrant&amp;quot;,
    &amp;quot;ssh_password&amp;quot;: &amp;quot;vagrant&amp;quot;,
    &amp;quot;boot_wait&amp;quot;:&amp;quot;5s&amp;quot;,
    &amp;quot;output_directory&amp;quot;: &amp;quot;ubuntu64_basebox_virtualbox&amp;quot;,
    &amp;quot;shutdown_command&amp;quot;: &amp;quot;echo &amp;#39;shutdown -P now&amp;#39; &amp;gt; shutdown.sh; echo &amp;#39;vagrant&amp;#39;|sudo -S sh &amp;#39;shutdown.sh&amp;#39;&amp;quot;,
    &amp;quot;boot_command&amp;quot;: [
      &amp;quot;&amp;lt;esc&amp;gt;&amp;lt;esc&amp;gt;&amp;lt;enter&amp;gt;&amp;lt;wait&amp;gt;&amp;quot;,
      &amp;quot;/install/vmlinuz noapic &amp;quot;,
      &amp;quot;ks=http://:/preseed.cfg &amp;quot;,
      &amp;quot;debian-installer=en_US auto locale=en_US kbd-chooser/method=us &amp;quot;,
      &amp;quot;hostname= &amp;quot;,
      &amp;quot;fb=false debconf/frontend=noninteractive &amp;quot;,
      &amp;quot;keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA &amp;quot;,
      &amp;quot;keyboard-configuration/variant=USA console-setup/ask_detect=false &amp;quot;,
      &amp;quot;initrd=/install/initrd.gz -- &amp;quot;,
      &amp;quot;&amp;lt;enter&amp;gt;&amp;quot;]
    },
    {&amp;quot;type&amp;quot;: &amp;quot;vmware-iso&amp;quot;,
    &amp;quot;guest_os_type&amp;quot;: &amp;quot;ubuntu-64&amp;quot;,
    &amp;quot;iso_url&amp;quot;: &amp;quot;http://mirror.anl.gov/pub/ubuntu-iso/CDs/utopic/ubuntu-14.10-server-amd64.iso&amp;quot;,
    &amp;quot;iso_checksum&amp;quot;: &amp;quot;91bd1cfba65417bfa04567e4f64b5c55&amp;quot;,
    &amp;quot;iso_checksum_type&amp;quot;:&amp;quot;md5&amp;quot;,
    &amp;quot;http_directory&amp;quot;: &amp;quot;preseed&amp;quot;,
    &amp;quot;ssh_username&amp;quot;: &amp;quot;vagrant&amp;quot;,
    &amp;quot;ssh_password&amp;quot;: &amp;quot;vagrant&amp;quot;,
    &amp;quot;boot_wait&amp;quot;:&amp;quot;5s&amp;quot;,
    &amp;quot;output_directory&amp;quot;: &amp;quot;ubuntu64_basebox_vmware&amp;quot;,
    &amp;quot;shutdown_command&amp;quot;: &amp;quot;echo &amp;#39;shutdown -P now&amp;#39; &amp;gt; shutdown.sh; echo &amp;#39;vagrant&amp;#39;|sudo -S sh &amp;#39;shutdown.sh&amp;#39;&amp;quot;,
    &amp;quot;boot_command&amp;quot;: [
      &amp;quot;&amp;lt;esc&amp;gt;&amp;lt;esc&amp;gt;&amp;lt;enter&amp;gt;&amp;lt;wait&amp;gt;&amp;quot;,
      &amp;quot;/install/vmlinuz noapic &amp;quot;,
      &amp;quot;ks=http://:/preseed.cfg &amp;quot;,
      &amp;quot;debian-installer=en_US auto locale=en_US kbd-chooser/method=us &amp;quot;,
      &amp;quot;hostname= &amp;quot;,
      &amp;quot;fb=false debconf/frontend=noninteractive &amp;quot;,
      &amp;quot;keyboard-configuration/modelcode=SKIP keyboard-configuration/layout=USA &amp;quot;,
      &amp;quot;keyboard-configuration/variant=USA console-setup/ask_detect=false &amp;quot;,
      &amp;quot;initrd=/install/initrd.gz -- &amp;quot;,
      &amp;quot;&amp;lt;enter&amp;gt;&amp;quot;]
    }],
  &amp;quot;provisioners&amp;quot;: [{
    &amp;quot;type&amp;quot;: &amp;quot;shell&amp;quot;,
    &amp;quot;execute_command&amp;quot;: &amp;quot;echo &amp;#39;vagrant&amp;#39; | sudo -S sh &amp;#39;&amp;#39;&amp;quot;,
    &amp;quot;inline&amp;quot;: [
      &amp;quot;apt-get update -y&amp;quot;,
      &amp;quot;apt-get install -y linux-headers-$(uname -r) build-essential dkms&amp;quot;,
      &amp;quot;apt-get clean&amp;quot;,
      &amp;quot;mount -o loop VBoxGuestAdditions.iso /media/cdrom&amp;quot;,
      &amp;quot;sh /media/cdrom/VBoxLinuxAdditions.run&amp;quot;,
      &amp;quot;umount /media/cdrom&amp;quot;,
      &amp;quot;mkdir /home/vagrant/.ssh&amp;quot;,
      &amp;quot;mkdir /root/.ssh&amp;quot;,
      &amp;quot;wget -qO- https://raw.github.com/mitchellh/vagrant/master/keys/vagrant.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys&amp;quot;,
      &amp;quot;echo &amp;#39;vagrant ALL=NOPASSWD:ALL&amp;#39; &amp;gt; /tmp/vagrant&amp;quot;,
      &amp;quot;chmod 0440 /tmp/vagrant&amp;quot;,
      &amp;quot;mv /tmp/vagrant /etc/sudoers.d/&amp;quot;
    ]}],
  &amp;quot;post-processors&amp;quot;: [
  {
      &amp;quot;type&amp;quot;: &amp;quot;vagrant&amp;quot;,
      &amp;quot;override&amp;quot;: {
        &amp;quot;virtualbox&amp;quot;: {
          &amp;quot;output&amp;quot;: &amp;quot;utopic-x64-virtualbox.box&amp;quot;
        },
        &amp;quot;vmware&amp;quot;: {
          &amp;quot;output&amp;quot;: &amp;quot;utopic-x64-vmware.box&amp;quot;
        }
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This in turn calls a kickstart (yes kickstart on Ubuntu) file stored in the preseed folder. This looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;install
text

cdrom

lang en_US.UTF-8
keyboard us

network --device eth0 --bootproto dhcp

timezone --utc America/Chicago

zerombr
clearpart --all --initlabel
bootloader --location=mbr

part /boot --fstype=ext3 --size=256 --asprimary
part pv.01 --size=1024 --grow --asprimary
volgroup vg_root pv.01
logvol swap --fstype swap --name=lv_swap --vgname=vg_root --size=1024
logvol / --fstype=ext4 --name=lv_root --vgname=vg_root --size=1024 --grow

auth --enableshadow --enablemd5

# rootpw is vagrant
rootpw --iscrypted $1$dUDXSoA9$/bEOTiK9rmsVgccsYir8W0
user --disabled

firewall --disabled

skipx

reboot

%packages
ubuntu-minimal
openssh-server
openssh-client
wget
curl
git
man
vim
ntp

%post
apt-get update

apt-get upgrade -y linux-generic

update-grub

useradd -m -s /bin/bash vagrant
echo vagrant:vagrant | chpasswd

mkdir -m 0700 -p /home/vagrant/.ssh

curl https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant.pub &amp;gt;&amp;gt; /home/vagrant/.ssh/authorized_keys

chmod 600 /home/vagrant/.ssh/authorized_keys
chown -R vagrant:vagrant /home/vagrant/.ssh

echo &amp;quot;vagrant ALL=(ALL) NOPASSWD: ALL&amp;quot; &amp;gt;&amp;gt; /etc/sudoers

sed -i &amp;#39;s/^PermitRootLogin without-password/PermitRootLogin yes/&amp;#39; /etc/ssh/sshd_config

apt-get clean

rm -rf /tmp/*

rm -f /var/log/wtmp /var/log/btmp

history -c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once both files are in place and packer is installed, building the images is as simple as:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;packer build packer.json&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will take a &lt;em&gt;long&lt;/em&gt; time, but it does eventually get there, and will produce two .box files in the output folders you specified in the packer.json. From there, you can upload them somewhere and have vagrantcloud make them available, as we have under &lt;code&gt;bunchc/utopic-x64&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post we looked at how to use packer.io to build Vagrant boxes for both VMware Workstation / Fusion and Virtualbox.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Changing Jenkins Home Folder</title>
   <link href="http://lanyon.getpoole.com/2014/10/27/Changing-Jenkins-Home-Folder/"/>
   <updated>2014-10-27T00:00:00-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/10/27/Changing-Jenkins-Home-Folder</id>
   <content type="html">&lt;p&gt;Everything Jenkins does happens in the context of the jenkins user by default. While that sounds obvious, it has some interesting implications if you aren&amp;#39;t careful. &lt;/p&gt;

&lt;h2&gt;The Problem&lt;/h2&gt;

&lt;p&gt;In my homelab, I&amp;#39;ve installed 14.04 onto a 16gb usb key. This is a hold over from the days when it was an ESXi lab, but, it works for the most part. However, for things like downloading vagrant boxes and the like, one needs to mount external storage. Enter the problem: Jenkins sets itself up in /var/lib/jenkins by default, which lives on my very limited usb stick.&lt;/p&gt;

&lt;p&gt;This in turn means anytime Jenkins tried to &amp;#39;vagrant up&amp;#39; a thing, it would fill my root partition trying to store all the temporary files vagrant used. Whoops.&lt;/p&gt;

&lt;h2&gt;Changing the Jenkins Home Directory&lt;/h2&gt;

&lt;p&gt;There are a number of posts out there on how to do this. None of them, however, addressed the vagrant issue in particular. To do that, one has to hit it with a larger bat.&lt;/p&gt;

&lt;h3&gt;First Change /etc/defaults&lt;/h3&gt;

&lt;p&gt;The first thing to do, is change how Jenkins thinks of itself. The most straight forward way I found was to change that in /etc/defaults/jenkins. This will be around line 23 or 25:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# jenkins home location
JENKINS_HOME=/new/location
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Then Change /etc/passwd&lt;/h3&gt;

&lt;p&gt;This is the step that was needed to fix the problem of Jenkins running vagrant and vagrant subsequently filling /:&lt;/p&gt;

&lt;p&gt;Change:
&lt;code&gt;jenkins:x:105:114:Jenkins,,,:/var/lib/jenkins:/bin/bash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To this:
&lt;code&gt;jenkins:x:105:114:Jenkins,,,:/new/location:/bin/bash&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;Finally Restart Jenkins&lt;/h3&gt;

&lt;p&gt;Now to make sure all the things stick:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo /etc/init.d/jenkins restart&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post we showed you how to change the Jenkins home directory, and why it&amp;#39;s also important to change it in /etc/passwd.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ZeroVM - A ZeroCloud Lab</title>
   <link href="http://lanyon.getpoole.com/2014/10/23/ZeroVM---A-ZeroCloud-Lab/"/>
   <updated>2014-10-23T00:00:00-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/10/23/ZeroVM---A-ZeroCloud-Lab</id>
   <content type="html">&lt;p&gt;At this point we&amp;#39;re pretty far down the ZeroVM rabbit hole. We&amp;#39;ve covered quite a bit of ground to get to this stage as well. Specific to this post, you will want to know more about ZeroCloud. You can do that &lt;a href=&quot;http://blog.codybunch.com/posts/2014-10-13-ZeroVM---Getting-Started-with-ZeroCloud&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Regarding getting up to speed on ZeroVM as I am, you will find the following useful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.codybunch.com/posts/2014-10-15-ZeroVM---Some-Background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.codybunch.com/posts/2014-10-16-ZeroVM---Security-Isolation-and-IO&quot;&gt;Isolation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.codybunch.com/posts/2014-10-21-ZeroVM---IO--Channels/&quot;&gt;IO Operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.codybunch.com/posts/2014-10-17-ZeroVM---Getting-Started-Again/&quot;&gt;Getting Started with ZeroVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.codybunch.com/posts/2014-10-20-ZeroVM-Link-Dump&quot;&gt;Lots of ZeroVM Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Building The ZeroCloud Lab&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;There are a few ways of going about this, however before we get started, realize that this is still early days and if you find this post a few months or a year or two down the road, it will likely be super out of date.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To get working with ZeroCloud, the most straight forward path is to follow the directions in the ZeroVM Docs &lt;a href=&quot;http://docs.zerovm.org/zerocloud/devenv.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you&amp;#39;ve finished, you should have a functional ZeroCloud lab.&lt;/p&gt;

&lt;h2&gt;Experimenting in the ZeroCloud Lab&lt;/h2&gt;

&lt;p&gt;Having a lab up in running is one thing, but it&amp;#39;s rather boring thing by itself. So, let&amp;#39;s do something with it! &lt;/p&gt;

&lt;h3&gt;ZeroCloud Hello World Example&lt;/h3&gt;

&lt;p&gt;The first thing we&amp;#39;ll try to do, is a generic &amp;quot;Hello World&amp;quot; example, taken from &lt;a href=&quot;http://docs.zerovm.org/zerocloud/runningcode.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Log into the lab:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;vagrant ssh

cd devstack/
./rejoin-stack.sh
source /vagrant/adminrc

zpm auth
export OS_AUTH_TOKEN=PKIZ_Zrz_Qa5NJm44FWeF7Wp...
export OS_STORAGE_URL=http://127.0.0.1:8080/v1/AUTH_7fbcd8784f8843a180cf187bbb12e49c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You will need to change the AUTH&lt;em&gt;TOKEN and STORAGE&lt;/em&gt;URL values to match those returned by zpm auth.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Create our &amp;quot;Hello World&amp;quot; python file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cat &amp;gt; example &amp;lt;&amp;lt;EOF
#!file://python2.7:python
import sys
print(&amp;quot;Hello from ZeroVM!&amp;quot;)
print(&amp;quot;sys.platform is &amp;#39;%s&amp;#39;&amp;quot; % sys.platform)
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Now we run the example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;curl -i -X POST -H &amp;quot;X-Auth-Token: $OS_AUTH_TOKEN&amp;quot; \
  -H &amp;quot;X-Zerovm-Execute: 1.0&amp;quot; -H &amp;quot;Content-Type: application/python&amp;quot; \
  --data-binary @example $OS_STORAGE_URL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, so what did we do then? In the first step we logged in to our lab, sourced a file that contains credentials for our environment, and then set some additional environment variables to store our auth token and swift url.&lt;/p&gt;

&lt;p&gt;Next we created the hello-world example file. In the absence of a text editor we just dumped everything between &amp;quot;&amp;lt;&amp;lt;EOF&amp;quot; and &amp;quot;EOF&amp;quot; into the file &amp;#39;example&amp;#39;. Note the first line in the file begins with &lt;code&gt;#!file://&lt;/code&gt;. This is important as it lets the parser know what to do with said file, in this case, fire up python.&lt;/p&gt;

&lt;p&gt;Finally, we use curl against our Swift install, letting it know to jump out to the ZeroVM middleware and that our application type is python. Additionally we specify our entire program as the payload in &lt;code&gt;--data-binary&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post, we showed you how to build a ZeroCloud lab and run an example &amp;quot;Hello World&amp;quot; application within it. If you would like to explore some more complex applications, be sure to explore the various talks and videos &lt;a href=&quot;http://blog.codybunch.com/posts/2014-10-20-ZeroVM-Link-Dump&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ZeroVM - Getting Started with ZeroCloud</title>
   <link href="http://lanyon.getpoole.com/2014/10/22/ZeroVM---Getting-Started-with-ZeroCloud/"/>
   <updated>2014-10-22T00:00:00-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/10/22/ZeroVM---Getting-Started-with-ZeroCloud</id>
   <content type="html">&lt;p&gt;If you are getting up to speed on ZeroVM as I am, you will find the following useful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.codybunch.com/posts/2014-10-15-ZeroVM---Some-Background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.codybunch.com/posts/2014-10-16-ZeroVM---Security-Isolation-and-IO&quot;&gt;Isolation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.codybunch.com/posts/2014-10-21-ZeroVM---IO--Channels/&quot;&gt;IO Operations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.codybunch.com/posts/2014-10-17-ZeroVM---Getting-Started-Again/&quot;&gt;Getting Started with ZeroVM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.codybunch.com/posts/2014-10-20-ZeroVM-Link-Dump&quot;&gt;Lots of ZeroVM Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, this &lt;a href=&quot;https://www.packtpub.com/books/content/mapreduce-openstack-swift-and-zerovm&quot;&gt;post&lt;/a&gt; does a great job of explaining how ZeroVM fits when you start to approach middling to large (Read: &lt;em&gt;Big Data&lt;/em&gt;) problems. Go read it now.&lt;/p&gt;

&lt;h2&gt;Getting Started with ZeroCloud&lt;/h2&gt;

&lt;p&gt;Now that you&amp;#39;ve read the &lt;a href=&quot;https://www.packtpub.com/books/content/mapreduce-openstack-swift-and-zerovm&quot;&gt;introduction by Lars&lt;/a&gt;, and I trust that you have, we can start looking into the &amp;#39;what&amp;#39; of ZeroCloud. In this post we&amp;#39;ll touch on it&amp;#39;s architecture and use case or two. In a subsequent post we&amp;#39;ll show you how to build your own small-scale lab for such an environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Also go here, watch &lt;a href=&quot;https://www.youtube.com/watch?v=VYZU_4w_dCA&quot;&gt;this&lt;/a&gt;, around the 16:30 mark, pay attention to the &amp;#39;t = data / Rate&amp;#39; bits.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is where things in ZeroVM start to get really cool.&lt;/p&gt;

&lt;h3&gt;ZeroCloud Architecture&lt;/h3&gt;

&lt;p&gt;The best way to describe the what and how of ZeroCloud is with a few diagrams which we will then dive into. These are borrowed form slides in past presentations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://openstack.prov12n.com/screens/1e1bd9b12a3230982c98-e2a0e10379dcd0e09ec354fba3ca6600.r72.cf1.rackcdn.comZeroCloud.pdf_2014-10-21_13-09-08.jpg&quot; alt=&quot;Highlevel ZeroCloud Architecture&quot;&gt;&lt;/p&gt;

&lt;p&gt;This first diagram is a &lt;em&gt;hugely&lt;/em&gt; simplified view of a swift environment, that is, if you have worked with OpenStack Swift it should look familiar enough. The &amp;quot;Proxy&amp;quot; nodes at the top are Swift Proxies, the Storage Nodes below are well, object storage nodes.&lt;/p&gt;

&lt;p&gt;What changes for ZeroCloud is the addition of a few ZVM parts made available via Swift Middleware. In this case ZVM represents job brokers, some messaging, ZeroVM itself, as well as an &amp;#39;executor&amp;#39; that handles the connecting of channels and the reading / writing of objects in Swift. This next diagram breaks that down further:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://openstack.prov12n.com/screens/1e1bd9b12a3230982c98-e2a0e10379dcd0e09ec354fba3ca6600.r72.cf1.rackcdn.comZeroCloud.pdf_2014-10-21_13-10-12.jpg&quot; alt=&quot;ZeroCloud Dataflow Architecture&quot;&gt;&lt;/p&gt;

&lt;p&gt;In this diagram, which admittedly is an eyechart, each step in the ZeroVM Swift Middleware is shown. Working left to right: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; The user initiates a job request via the Swift REST API by sending a post request with the code to be executed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; This hits the Swift Proxy node and is handed to the ZeroVM middleware, which, via a job scheduler finds where the closest replica of your data is, and sends the request along.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; The job arrives at the executor who then fires up a net-new ZeroVM session for the job, opens the required IO Channels to your file* and if needed other ZeroVM sessions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; The ZeroVM job, finished with it&amp;#39;s work, sends the response back up to the Proxy Server who then serves the response back to the user.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; re: file in #3, in the default configuration this is a net new copy of the file rather than the actual object itself. This prevents accidental damage to the file.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;ZeroCloud Use Cases&lt;/h3&gt;

&lt;p&gt;So what do you do with a deterministic, computable, distributed data store? Some things that jump to mind are things like &amp;quot;A Giant MapReduce Cluster&amp;quot;, similar to the one described &lt;a href=&quot;https://www.packtpub.com/books/content/mapreduce-openstack-swift-and-zerovm&quot;&gt;here&lt;/a&gt;. As Lars describes, ZeroCloud can address one of the biggest MapReduce computational issues, that is data locality.&lt;/p&gt;

&lt;p&gt;In addition to MapReduce type workloads, what else can one do? One could couple ElasticSeach and Log Stash, and indeed serve Kibana directly from Zero Cloud. Video trans-coding is another use case that I&amp;#39;ve seen. &lt;/p&gt;

&lt;p&gt;ZeroVM/ZeroCloud then, works well when you have a data heavy workload that would benefit being attacked in a distributed fashion.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post we introduced you to ZeroCloud, the amalgamation of ZeroVM and OpenStack Swift. We dove into the architecture of ZeroCloud and introduced some use cases where having programmable distributed storage system is insanely useful.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ZeroVM - IO Operations in ZeroVM</title>
   <link href="http://lanyon.getpoole.com/2014/10/21/ZeroVM---IO--Channels/"/>
   <updated>2014-10-21T00:00:00-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/10/21/ZeroVM---IO--Channels</id>
   <content type="html">&lt;p&gt;If you are just joining these posts, you might want to take a few minutes and review these other posts on ZeroVM:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.codybunch.com/posts/2014-10-15-ZeroVM---Some-Background&quot;&gt;Background&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.codybunch.com/posts/2014-10-16-ZeroVM---Security-Isolation-and-IO&quot;&gt;Isolation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.codybunch.com/posts/2014-10-17-ZeroVM---Getting-Started-Again/&quot;&gt;Getting Started with ZeroVM&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.codybunch.com/posts/2014-10-20-ZeroVM-Link-Dump&quot;&gt;Lots of ZeroVM Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;IO Operations in ZeroVM&lt;/h2&gt;

&lt;p&gt;IO in ZeroVM is an odd sort of beast. As you are not working in a container or a VM you do not inherit the unlimited read/write to arbirtrary places as you would have otherwise. Instead the abstraction unit for ZeroVM is the &lt;em&gt;channel&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;Channels&lt;/h3&gt;

&lt;p&gt;As the intro said, a &lt;em&gt;channel&lt;/em&gt; is the unit of IO abstraction within ZeroVM. That means any network communication, any file write, any input from a pipe, or output to swift, each is an individual channel. &lt;/p&gt;

&lt;p&gt;Additionally, channels have to be explicitly defined prior to launching a ZeroVM instance. In some ways, this is like specifying the VMDK for a traditional VM to boot from. The requirement to specify all channels before hand does provide a powerful security mechanism in that all IO is effectively sandboxed. An erroneous process can not cause damage outside of the narrow constraints defined within said channel.&lt;/p&gt;

&lt;p&gt;Channels in ZeroVM are unique in other ways. Each channel, regardless of type, is presented to the instance as a file handle. &lt;/p&gt;

&lt;h3&gt;Channel Quotas&lt;/h3&gt;

&lt;p&gt;To keep with the security and isolation provided within ZeroVM, along with the explicit channel definition, one must also specify a quota for IO. You specify said quota with four bits of information: (1) Total reads; (2) Total writes; (3) Total Read Size; and (4) Total Write Size.&lt;/p&gt;

&lt;p&gt;Quotas are handled on a &amp;#39;first one hit&amp;#39; basis. So, if you have 10,000 reads to do, but said number of reads exceeds the total read size in bytes at read number 3,500, well, that&amp;#39;s it. No more reads for you. The inverse of this is also true, when you run out of the number of allowed reads or writes before you hit the size quota, you will also get a failure returned.&lt;/p&gt;

&lt;p&gt;When you do hit this limit, however, ZeroVM tries to fail gracefully, in that you will still have all the data read or written up to that point. Below is an example of what happens when you exceed the number of available reads:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ dd if=/dev/urandom of=/home/vagrant/file.txt bs=1048576 count=100

$ cat &amp;gt; /home/vagrant/example.py &amp;lt;&amp;lt;EOF
file = open(&amp;#39;/dev/3.file.txt&amp;#39;, &amp;#39;r&amp;#39;)
print file.read(5)
EOF

$ su - vagrant -c &amp;quot;zvsh --zvm-save-dir ~/ --zvm-image python.tar --zvm-image ~/file.txt python @example.py&amp;quot;

$ sudo sed -i &amp;quot;s|Channel = /home/vagrant/file.txt,/dev/3.file.txt,3,0,4294967296,4294967296,0,0|Channel = /home/vagrant/file.txt,/dev/3.file.txt,3,0,3,3,3,3|g&amp;quot; /home/vagrant/manifest.1
$ sudo sed -i &amp;quot;s|/home/vagrant/stdout.1|/dev/stdout|g&amp;quot; /home/vagrant/manifest.1
$ sudo sed -i &amp;quot;s|/home/vagrant/stderr.1|/dev/stderr|g&amp;quot; /home/vagrant/manifest.1

$ zerovm -t 2 manifest.1

Traceback (most recent call last):
  File &amp;quot;/dev/1.example.py&amp;quot;, line 2, in &amp;lt;module&amp;gt;
    print file.read(5)
IOError: [Errno -122] Unknown error 4294967174
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What is happening in that example is this:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Create a 100MB file full of random bits&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Create &amp;#39;example.py&amp;#39; to read the first 5 characters in the file&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Use zvsh to run example.py inside ZeroVM... this should dump some garbage characters to the console.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; Change the quota from &amp;#39;huge&amp;#39; to 3&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; Adjust the manifest file to allow stderr and stdout to work properly&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt; Run ZeroVM with the updated manifest &amp;amp; receive IO error&lt;/p&gt;

&lt;h3&gt;Specifying Channels in a Manifest File&lt;/h3&gt;

&lt;p&gt;So that example took me way too long to figure out. Mostly due to a few small things and one big one: Creating the manifest file properly. What follows is a quick way to create a manifest file as well as our example manifest and a breakdown thereof.&lt;/p&gt;

&lt;h4&gt;Creating a Manifest File&lt;/h4&gt;

&lt;p&gt;It turns out that the zvsh utility that is bundled with ZeroVM has the ability to save the manifest (and other runtime files) when you launch it. To generate the template manifest that is used and modified in this example, run the following command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;zvsh --zvm-save-dir ~/ --zvm-image python.tar --zvm-image ~/file.txt python @example.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Breakdown of the Manifest File&lt;/h4&gt;

&lt;p&gt;The example file that follows was for the specific bits used in our example. It can, however, make for a good starting point for your own manifest files.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Node = 1
Version = 20130611
Timeout = 50
Memory = 4294967296,0
Program = /home/vagrant/boot.1
Channel = /dev/stdin,/dev/stdin,0,0,4294967296,4294967296,0,0
Channel = /dev/stdout,/dev/stdout,0,0,0,0,4294967296,4294967296
Channel = /dev/stderr,/dev/stderr,0,0,0,0,4294967296,4294967296
Channel = /home/vagrant/example.py,/dev/1.example.py,3,0,4294967296,4294967296,0,0
Channel = /home/vagrant/python.tar,/dev/2.python.tar,3,0,4294967296,4294967296,0,0
Channel = /home/vagrant/file.txt,/dev/3.file.txt,3,0,3,3,3,3
Channel = /home/vagrant/boot.1,/dev/self,3,0,4294967296,4294967296,0,0
Channel = /home/vagrant/nvram.1,/dev/nvram,3,0,4294967296,4294967296,4294967296,4294967296
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Taken line by line:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;strong&gt;Node&lt;/strong&gt; an optional parameter specifying the node number.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; &lt;strong&gt;Version&lt;/strong&gt; mandatory. As manifest versions are incompatible. This tells both ZeroVM and you which version of the manifest you are using.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; &lt;strong&gt;Timeout&lt;/strong&gt; in seconds, is a mandatory parameter. This prevents long running ZeroVM jobs from consuming excess resources.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; &lt;strong&gt;Memory&lt;/strong&gt; Also mandatory, This is a comma separated value, where the first position is the 32-bit value representing memory. In our case, the max 4GB. The second number can be either 0 or 1 specifying the eTag used to checksum all data passing through ZeroVM&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; &lt;strong&gt;Program&lt;/strong&gt; Specifies the ZeroVM cross compiled binary that we will run&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt; &lt;strong&gt;Channel&lt;/strong&gt; The channel definitions, these follow the format:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Channel = &amp;lt;uri&amp;gt;,&amp;lt;alias&amp;gt;,&amp;lt;type&amp;gt;,&amp;lt;etag&amp;gt;,&amp;lt;gets&amp;gt;,&amp;lt;get_size&amp;gt;,&amp;lt;puts&amp;gt;,&amp;lt;put_size&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post we covered how IO is handled in ZeroVM. We first explained the Channel concept, how quotas are handled within channels, and finally, how to add a channel or channels at ZeroVM runtime using a manifest.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ZeroVM Link Dump</title>
   <link href="http://lanyon.getpoole.com/2014/10/20/ZeroVM-Link-Dump/"/>
   <updated>2014-10-20T00:00:00-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/10/20/ZeroVM-Link-Dump</id>
   <content type="html">&lt;p&gt;Instead of curating my own links this time, my friend and colleague &lt;a href=&quot;http://cczona.com&quot;&gt;Carina C. Zona, ZeroVM&amp;#39;s community manager&lt;/a&gt; has gathered these as they relate to ZeroVM:&lt;/p&gt;

&lt;h2&gt;Posts by Lars&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.packtpub.com/books/content/mapreduce-openstack-swift-and-zerovm&quot;&gt;https://www.packtpub.com/books/content/mapreduce-openstack-swift-and-zerovm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.packtpub.com/books/content/zerovm-virtualization-designed-cloud&quot;&gt;https://www.packtpub.com/books/content/zerovm-virtualization-designed-cloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&amp;quot;ZeroVM Architecture and ZVM Runtime (ZRT)&amp;quot;&lt;/h2&gt;

&lt;p&gt;Ryan McKinney at University of Texas San Antonio Cloud &amp;amp; Big Data Laboratory [2014-08-05]
- &lt;a href=&quot;http://www.slideshare.net/sgt_mac/zero-vm-architecture&quot;&gt;slides (work in progress)&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&amp;quot;Changing the World with ZeroVM and Swift&amp;quot;&lt;/h2&gt;

&lt;p&gt;Jakub Krajcovic at PyConAU OpenStack Miniconf [2014-08-01]
- &lt;a href=&quot;https://www.youtube.com/watch?v=e8Jui4EQbB8&amp;amp;list=UUS9sdEyduD9K83K3GkvQlOA&quot;&gt;video&lt;/a&gt;
- &lt;a href=&quot;http://www.slideshare.net/jakubk/changing-the-world-with-zerovm-and-swift&quot;&gt;slides&lt;/a&gt;
- &lt;a href=&quot;http://sites.rcbops.com/openstack_miniconf/2014/07/openstack-miniconf-programme-for-pycon-au/&quot;&gt;abstract&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&amp;quot;Deep Dive into ZeroVM&amp;quot;&lt;/h2&gt;

&lt;p&gt;Van Lindberg at OSCON Expo [2014-07-23]
- &lt;em&gt;(materials unavailable)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;&amp;quot;What Is ZeroVM?&amp;quot;&lt;/h2&gt;

&lt;p&gt;Carina C. Zona at OSCON Expo [2014-07-22]
- &lt;a href=&quot;http://www.slideshare.net/cczona/what-is-zerovm&quot;&gt;slides&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&amp;quot;ZeroVM: Virtualization for the Cloud&amp;quot;&lt;/h2&gt;

&lt;p&gt;Lars Butler at EuroPython [2014-07-21]
- &lt;a href=&quot;https://www.youtube.com/watch?v=_a-aMMCSExM&amp;amp;t=32m55s&quot;&gt;video&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&amp;quot;Introduction to ZeroVM&amp;quot;&lt;/h2&gt;

&lt;p&gt;Muharem Jrnjadovic at Open Cloud Day [2014-07]
- &lt;a href=&quot;http://player.mashpedia.com/player.php?q=12biEPjZFgY&quot;&gt;video&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&amp;quot;NoSQL - Computable Object Store with OpenStack Swift and ZeroVM&amp;quot;&lt;/h2&gt;

&lt;p&gt;(aka &amp;quot;Programmable Object Store with OpenStack Swift and ZeroVM&amp;quot;)
Adrian Otto at BigDataCamp [2014-06-14]
- &lt;a href=&quot;https://www.youtube.com/watch?v=VYZU_4w_dCA&quot;&gt;video&lt;/a&gt;
- &lt;a href=&quot;http://1e1bd9b12a3230982c98-e2a0e10379dcd0e09ec354fba3ca6600.r72.cf1.rackcdn.com/ZeroCloud.pdf&quot;&gt;slides&lt;/a&gt;
- &lt;a href=&quot;http://www.campsite.org/bigdatacampla/event/531/session/921&quot;&gt;abstract&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&amp;quot;Using ZeroVM and Swift to Build a Compute Enabled Storage Platform&amp;quot;&lt;/h2&gt;

&lt;p&gt;Blake Yeager &amp;amp; Camuel Gilydov at OpenStack Summit [2014-05-14]
- &lt;a href=&quot;https://www.youtube.com/watch?v=oR1RUSdUQCs&quot;&gt;video&lt;/a&gt;
- &lt;a href=&quot;https://www.openstack.org/assets/presentation-media/ZeroVM-and-OpenStack-Swift.pdf&quot;&gt;slides&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&amp;quot;Using ZeroVM and Swift to Build a Compute Enabled Storage Platform&amp;quot;&lt;/h2&gt;

&lt;p&gt;Blake Yeager at Open BigCloud Symposium [2014-05-08]
- &lt;em&gt;(materials unavailable)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;&amp;quot;ZeroVM Background&amp;quot;&lt;/h2&gt;

&lt;p&gt;Prosunjit Biswas at University of Texas at San Antionio [UTSA] Institute of Cyber Security [2014-04-23]
- &lt;a href=&quot;http://www.slideshare.net/prosunjit/zerovm-backgroud&quot;&gt;slides&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&amp;quot;Process Virtualization with ZeroVM&amp;quot;&lt;/h2&gt;

&lt;p&gt;Jakub Krajcovi at rax.io [2014-02-26]
- &lt;a href=&quot;http://www.slideshare.net/jakubk/how-to-revolutioniseanindustryraxio&quot;&gt;slides&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&amp;quot;ZeroVM Zwift: OpenStack Platform&amp;quot;&lt;/h2&gt;

&lt;p&gt;Camuel Gilydov and Constantine Peresypkin at OpenStack Summit [2013-04]
- &lt;a href=&quot;http://openstacksummitnovember2013.sched.org/event/6baa884625e0da79f8a0d582f0d600dc#.VDw-rb7FPIY&quot;&gt;abstract&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&amp;quot;Big Data on OpenStack&amp;quot;&lt;/h2&gt;

&lt;p&gt;Camuel Gilydov at OpenStack Isreal [2012-06]
- &lt;a href=&quot;https://www.youtube.com/watch?v=bbBunW0ms10&quot;&gt;video&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;&amp;quot;Containers or VMs: Which Virtualization Technology Works for You?&amp;quot;&lt;/h2&gt;

&lt;p&gt;Panel discussion with ZeroVM, Docker, and VMWare at while42 meetup [2014-03-04]
- &lt;a href=&quot;https://www.youtube.com/watch?v=_Dm1KeC6VRI&quot;&gt;video&lt;/a&gt;
- &lt;a href=&quot;https://www.eventbrite.com/e/meetnlearn-vm-or-containers-which-virtualization-techno-works-for-you-tickets-10666785643&quot;&gt;info&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ZeroVM - Getting Started, Again</title>
   <link href="http://lanyon.getpoole.com/2014/10/17/ZeroVM---Getting-Started-Again/"/>
   <updated>2014-10-17T00:00:00-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/10/17/ZeroVM---Getting-Started-Again</id>
   <content type="html">&lt;p&gt;Ok, so now that we&amp;#39;ve covered a LOT of ZeroVM background &amp;amp; isolation details, let&amp;#39;s actually start to get our hands dirty.&lt;/p&gt;

&lt;p&gt;tl;dr - &lt;code&gt;git clone https://github.com/bunchc/vagrant-zerovm.git &amp;amp;&amp;amp; cd vagrant-zerovm &amp;amp;&amp;amp; vagrant up&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;ZeroVM has packages for Ubuntu 12.04, so in order to get started you will either need hardware with 12.04 installed or a VM of the same. Once you have a VM up and running you are ready to install.&lt;/p&gt;

&lt;h2&gt;Installing ZeroVM&lt;/h2&gt;

&lt;p&gt;To install ZeroVM, log into your Ubuntu 12.04 setup and run the following commands:&lt;/p&gt;

&lt;p&gt;Install some needed packages:
&lt;code&gt;
sudo apt-get update
sudo apt-get install -y curl wget
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Install the ZeroVM repository and key:
&lt;code&gt;
sudo su -c &amp;#39;echo &amp;quot;deb http://packages.zerovm.org/apt/ubuntu/ precise main&amp;quot; &amp;gt; /etc/apt/sources.list.d/zerovm-precise.list&amp;#39; 
wget -O- http://packages.zerovm.org/apt/ubuntu/zerovm.pkg.key | sudo apt-key add - 
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next, refresh our repository and install ZeroVM.
&lt;code&gt;
sudo apt-get update
sudo apt-get install -y zerovm zerovm-cli
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With that, you have ZeroVM installed.&lt;/p&gt;

&lt;p&gt;By itself that is not interesting, so let&amp;#39;s show off a the Python version of &amp;quot;Hello world&amp;quot; run inside ZeroVM:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;wget http://packages.zerovm.org/zerovm-samples/python.tar 
echo &amp;#39;print &amp;quot;Hello&amp;quot;&amp;#39; &amp;gt; hello.py

zvsh --zvm-image python.tar python @hello.py 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first command fetches a cPython which has been cross compiled to work in ZeroVM. Next we set up our example file and run it. There are some even more interesting examples if you head over the &lt;a href=&quot;http://www.zerovm.org/download.html&quot;&gt;ZeroVM download site.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post, you setup an Ubuntu 12.04 machine, installed the ZeroVM apt repositories, and installed ZeroVM. Finally, you created a Python of hello world and ran that within your newly installed ZeroVM.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ZeroVM - Isolation</title>
   <link href="http://lanyon.getpoole.com/2014/10/16/ZeroVM---Security-Isolation-and-IO/"/>
   <updated>2014-10-16T00:00:00-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/10/16/ZeroVM---Security-Isolation-and-IO</id>
   <content type="html">&lt;p&gt;Here we go with another post on ZeroVM. This time to help get you up to speed on how ZeroVM provides isolation. For a reminder of what ZeroVM is, how it is different than containers and other virtualization technologies, see my prior post &lt;a href=&quot;http://blog.codybunch.com/posts/2014-10-15-ZeroVM---Some-Background/&quot;&gt;here&lt;/a&gt;, or the ZeroVM docs &lt;a href=&quot;http://docs.zerovm.org&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Isolation&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;http://docs.zerovm.org/zerovm/isolation_security.html&quot;&gt;ZeroVM site&lt;/a&gt; itself doesn&amp;#39;t say much on the isolation provided by ZeroVM. This is largely because it derives it&amp;#39;s isolation through the use of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Google_Native_Client&quot;&gt;Google NaCL project&lt;/a&gt;. The tl;dr for NaCL, is that it requires applications be ported over to it&amp;#39;s sandboxing environment, in which a subset of processor instructions are made available.&lt;/p&gt;

&lt;p&gt;The sandbox environment provided by NaCL is a limited subset of processor instructions that prevent various syscalls that could be destructive. Further, ZeroVM takes the 50 syscalls available in NaCL and reduces that to six. Meaning, if your code contains a syscall other than one of the six currently allowed, your code will fail when ZeroVM attempts to execute the specific syscall. The six syscalls allowed are currently:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pread&lt;/li&gt;
&lt;li&gt;pwrite&lt;/li&gt;
&lt;li&gt;jail&lt;/li&gt;
&lt;li&gt;unjail&lt;/li&gt;
&lt;li&gt;fork&lt;/li&gt;
&lt;li&gt;exit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can test this by trying an invalid write instead of pwrite with the following C++&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;

int main()
{
    char data[128];

    if(read(0, data, 128) &amp;lt; 0)
     write(2, &amp;quot;An error occurred in the read.\n&amp;quot;, 31);

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is what it looks like when it implodes:
```
$ zvsh syscalls
----------/tmp/tmpl7Mi1v----------
Node = 1
Version = 20130611
Timeout = 50
Memory = 4294967296, 0
Program = /home/vagrant/syscalls/syscalls
Channel = /dev/stdin,/dev/stdin,0,0,4294967296,4294967296,0,0
Channel = /tmp/tmpOfgnG6/stdout,/dev/stdout,0,0,0,0,4294967296,4294967296
Channel = /tmp/tmpOfgnG6/stderr,/dev/stderr,0,0,0,0,4294967296,4294967296&lt;/p&gt;

&lt;h2&gt;Channel = /tmp/tmpeNIzx4,/dev/nvram,3,0,4294967296,4294967296,4294967296,4294967296&lt;/h2&gt;

&lt;p&gt;----------/tmp/tmpeNIzx4----------
[args]
args = syscalls
[mapping]
channel=/dev/stdin,mode=char
channel=/dev/stdout,mode=char
channel=/dev/stderr,mode=char&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;2
0
0
disable
0.00 0.00 0 0 0 0 0 0 0 0
src/loader/elf_util.c 178: Segment 0 is of unexpected type 0x6, flag 0x5&lt;/p&gt;

&lt;p&gt;ERROR: ZeroVM return code is 8
```&lt;/p&gt;

&lt;p&gt;What is important here, at least in terms of telling why it failed is: &lt;code&gt;ERROR: ZeroVM return code is 8&lt;/code&gt;. Error codes 1 - 17 indicate an issue in untrusted code. In our example, it was specifically the read / write bits that caused the issue.&lt;/p&gt;

&lt;h2&gt;Down The Rabbit Hole&lt;/h2&gt;

&lt;p&gt;Time to jump down the rabbit hole. Into what actually just happened. First some diagrams:&lt;/p&gt;

&lt;h3&gt;ZeroVM Stack&lt;/h3&gt;

&lt;p&gt;In this first diagram, you are looking at the internal structure of the ZeroVM process.
&lt;img src=&quot;http://openstack.prov12n.com/screens/ZeroVM-Architecture-Design-Overview.pdf_2014-10-13_15-14-18.jpg&quot; alt=&quot;ZVM Trusted Code Base Architecture&quot;&gt;&lt;/p&gt;

&lt;p&gt;Working from the outside in, the grey area represents everything that is ZeroVM, all of it&amp;#39;s runtime data, IO Channels, virtual file systems, and most importantly, the user code to be executed.&lt;/p&gt;

&lt;p&gt;Next, in the pink area is where end-user code gets loaded up, from there a call will progress down the stack. In the last white layer you can see the individual sys-calls as implemented in ZeroVM as well as their corresponding trappings.&lt;/p&gt;

&lt;p&gt;One last thing to note is the two sys-calls for zvm&lt;em&gt;pread and zvm&lt;/em&gt;pwrite, their traps, handlers, and this thing called a trampoline. The trampolines are a mechanisim that facilitates the switch from untrusted to trusted execution. A syscall will start in the &amp;#39;untrusted&amp;#39; context, if it is an allowed call, the ZRT or ZeroVM Run Time via it&amp;#39;s hooks into the ZVM Syscall API and passes the call to a &amp;quot;trampoline&amp;quot; to perform the context switch needed to allow the syscall to execute in trusted space.&lt;/p&gt;

&lt;h3&gt;ZeroVM Guest Memory Footprint&lt;/h3&gt;

&lt;p&gt;This next diagram offers a different view on the above ZeroVM guest. In the below diagram, you will see how the NaCL &amp;amp; ZeroVM &lt;em&gt;trampolines&lt;/em&gt; are implemented in memory, how that in turn gets passed down to the corresponding syscall, the trusted ELF binary, and where the rest of ZeroVM is contained.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://openstack.prov12n.com/screens/ZeroVM-Architecture-Design-Overview.pdf_2014-10-13_15-18-27.jpg&quot; alt=&quot;Anatomy of the ZeroVM Guest Memory footprint&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post, we took a deeper look into how isolation is handled within ZeorVM. We started with a high level discussion of NaCL and ZeroVM&amp;#39;s implementation of limited syscalls. We then attempted to execute an invalid syscall. Finally we got into the nitty gritty of how that syscall is trapped via the ZeroVM runtime and where in it&amp;#39;s memory stack context switches from trusted to untrusted code happen.&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/viewer?a=v&amp;amp;pid=forums&amp;amp;srcid=MDM5MTg3MTAwNDAwMTI4Njc5NzkBMTUyNDg3NTk2NDczMTE1MDYyMTIBcENUQTliQjJwSXNKATAuMQEBdjI&quot;&gt;Diagrams from ZeroVM G+ Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/sgt_mac/zero-vm-architecture&quot;&gt;ZeroVM Architecture Slideshare&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>ZeroVM - Some Background</title>
   <link href="http://lanyon.getpoole.com/2014/10/15/ZeroVM---Some-Background/"/>
   <updated>2014-10-15T00:00:00-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/10/15/ZeroVM---Some-Background</id>
   <content type="html">&lt;p&gt;In a little over three weeks, at the &lt;a href=&quot;https://www.openstack.org/summit/openstack-paris-summit-2014/&quot;&gt;Paris Summit&lt;/a&gt;, I&amp;#39;ll be helping give a 90 minute workshop on &lt;a href=&quot;http://zerovm.org/&quot;&gt;ZeroVM&lt;/a&gt;. 90 minutes is not actually a lot of time to get a good grasp on what ZeroVM is, how it operates, and most importantly, &lt;em&gt;why&lt;/em&gt; it is important.&lt;/p&gt;

&lt;p&gt;These next few posts however, I am hoping, will shed some light on that.&lt;/p&gt;

&lt;h2&gt;What is ZeroVM?&lt;/h2&gt;

&lt;p&gt;From the ZeroVM website:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ZeroVM is an open source virtualization technology that is based on the Chromium Native Client (NaCl) project. ZeroVM creates a secure and isolated execution environment which can run a single thread or application&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Read that over a few times. What it is saying, is where Docker provides packaging, traditional virtualization provides full OS isolation, ZeroVM provides an environment specific to a single application or thread.&lt;/p&gt;

&lt;p&gt;Explained another way, ZeroVM provides isolation at the thread or application level. It provides a &amp;quot;sandbox&amp;quot; environment for you to run arbitrary &amp;quot;untrusted&amp;quot; code. Some examples of how this could be useful can be found &lt;a href=&quot;http://play.golang.org/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://www.python.org/shell/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;ZeroVM does this by using the &lt;a href=&quot;http://en.wikipedia.org/wiki/Google_Native_Client&quot;&gt;NaCL from Google&lt;/a&gt; to provide isolation and security. ZeroVM also has a number of other layers to provide the additional services for things like a Posix file system, I/O, and channels.&lt;/p&gt;

&lt;h3&gt;Use Cases&lt;/h3&gt;

&lt;p&gt;Due to the small size, speed, and isolation nature of ZeroVM, it is able to solve some problems which are very &amp;quot;big data&amp;quot; or cloud centric. Let&amp;#39;s take a look at some:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://incubator.apache.org/drill/&quot;&gt;Apache Drill&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.zerovm.org/en/latest/zerocloud/overview.html&quot;&gt;ZeroCloud&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;More &lt;a href=&quot;http://openstack.prov12n.com/getting-started-with-zerovm/&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Where Does ZeroVM Fit?&lt;/h2&gt;

&lt;p&gt;This diagram from the Atlanta OpenStack Summit should help:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://openstack.prov12n.com/screens/Using_ZeroVM_and_Swift_to_Build_a_Compute_Enabled_Storage_Platform_-_YouTube_2014-10-13_14-00-42.jpg&quot; alt=&quot;ZeroVM vs Traditional Virt&quot;&gt;&lt;/p&gt;

&lt;p&gt;Additionally, &lt;a href=&quot;https://www.youtube.com/watch?v=oR1RUSdUQCs#t=424&quot;&gt;this&lt;/a&gt; OpenStack Summit presentation should help clarify some as well.&lt;/p&gt;

&lt;h3&gt;Traditional Virtualization&lt;/h3&gt;

&lt;p&gt;Traditional Virtualization is perhaps the easiest to cover, it&amp;#39;s the most familiar way of isolating the things. I&amp;#39;ve been running VMware Workstation/Fusion, their enterprise products, etc for &lt;em&gt;ages&lt;/em&gt;. I imagine a lot of you have as well. To recap tho:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type 1 or 2 hypervisor&lt;/li&gt;
&lt;li&gt;Each VM is a set of processes&lt;/li&gt;
&lt;li&gt;CPU instructions virtualized (it&amp;#39;s a bit more complicated now-a-days with Hardware extensions)&lt;/li&gt;
&lt;li&gt;Carries around a full OS installation&lt;/li&gt;
&lt;li&gt;All resources isolated&lt;/li&gt;
&lt;li&gt;Very few &lt;em&gt;published&lt;/em&gt; VM escapes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A few clarifying points. I&amp;#39;ve simplified the CPU conversation for this discussion. That is, while hardware extensions provide native or near native execution, there is still quite a bit happening in software for those instructions which do not translate. Additionally, the &amp;quot;all resources isolated&amp;quot; is a bit of a simplification as well. Most modern hypervisors will do some manner of memory sharing, compression, and consolidation. However, memory is still generally isolated to a specific VM.&lt;/p&gt;

&lt;h3&gt;Containers (Docker / LXC)&lt;/h3&gt;

&lt;p&gt;Containers are all the rage these days. Docker has popularized and simplified the way we manage them. You get the same or better benefit from the shared hardware, however, containers strip quite a few of the layers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shared Kernel / OS&lt;/li&gt;
&lt;li&gt;Super low overhead&lt;/li&gt;
&lt;li&gt;Fast startup&lt;/li&gt;
&lt;li&gt;&amp;#39;secure&amp;#39;&lt;/li&gt;
&lt;li&gt;Managed via namespaces and process isolation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The important thing to note here, are the shared Kernel bits and the low overhead. The shared Kernel basically means everyone will run from the same Linux Kernel, and thus have the same features and limits therein. However, as an upside to that, you also shed having to carry around a full OS installation, networking stack, etc, and thus have much less overhead. This enables faster startup times.&lt;/p&gt;

&lt;h3&gt;ZeroVM&lt;/h3&gt;

&lt;p&gt;Finally, and most important to what we&amp;#39;re talking about is ZeroVM. ZeroVM is somewhere a bit beyond containers. That is you still have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Shared hardware&lt;/li&gt;
&lt;li&gt;Low Overhead&lt;/li&gt;
&lt;li&gt;Fast Startup&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, you are no longer carrying an OS or Kernel around. In turn, this further minimizes the attack surface. That is, there are a total of 6 system calls available from within ZeroVM.&lt;/p&gt;

&lt;p&gt;In addition, due to it&amp;#39;s extremely small size one can spin up a new ZeroVM instance in miliseconds, vs seconds or minutes for the other technologies. This speed advantage lends itself well to one of ZeroVMs primary use cases in the data-pipeline / data-processing space. Indeed it is the magic that makes ZeroCloud work. It does, however, require a different way of thinking about and approaching the problem. &lt;/p&gt;

&lt;p&gt;That is, ZeroVM instances are designed to be extremely temporary in nature. Load your data in, handle the processing, push it back out to disk and move on. Conceptually, it takes you a few steps further down the &amp;#39;everything is disposable&amp;#39; path, insofar as you will need to design and rewrite your apps to work with ZeroVM.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;While a wall of words, I hope I have provided some clarity around the what of ZeroVM and where it fits.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Instance Shelving</title>
   <link href="http://lanyon.getpoole.com/2014/10/14/Instance-Shelving/"/>
   <updated>2014-10-14T00:00:00-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/10/14/Instance-Shelving</id>
   <content type="html">&lt;p&gt;Shelving? No no no, not that kind of shelving. Similar however. Image Shelving in Nova allows you to power off instances without experiencing the resource penalty in keeping them around.&lt;/p&gt;

&lt;h2&gt;Instance Shelving&lt;/h2&gt;

&lt;p&gt;Before instance shelving in OpenStack, if a user powered down an instance, the resources would still be in use on the compute node that housed said instance. Quite wasteful, no? Say an instance is powered off for 72+ hours. Shelving allows you to keep all the various bits associated with the VM while moving it to somewhere that is not the hypervisor to conserve resources.&lt;/p&gt;

&lt;h2&gt;Working with Shelving&lt;/h2&gt;

&lt;p&gt;The assumption here is that you have either devstack or some other flavor of OpenStack running. There isn&amp;#39;t anything additional you need to configure to make this work.&lt;/p&gt;

&lt;p&gt;First, let&amp;#39;s log into our controller and look around at what&amp;#39;s running:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# nova list
+--------------------------------------+-------+--------+------------+-------------+-----------------------------------------------+
| ID                                   | Name  | Status | Task State | Power State | Networks                                      |
+--------------------------------------+-------+--------+------------+-------------+-----------------------------------------------+
| 05617907-3931-414f-88f3-fd180f69fde6 | test1 | ACTIVE | -          | Running     | cookbook_network_1=10.200.0.2, 192.168.100.11 |
+--------------------------------------+-------+--------+------------+-------------+-----------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, let&amp;#39;s shelve an instance:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# nova shelve test1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Did it get shelved?&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# nova list
+--------------------------------------+-------+-------------------+------------+-------------+-----------------------------------------------+
| ID                                   | Name  | Status            | Task State | Power State | Networks                                      |
+--------------------------------------+-------+-------------------+------------+-------------+-----------------------------------------------+
| 05617907-3931-414f-88f3-fd180f69fde6 | test1 | SHELVED_OFFLOADED | -          | Shutdown    | cookbook_network_1=10.200.0.2, 192.168.100.11 |
+--------------------------------------+-------+-------------------+------------+-------------+-----------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The change in status to &amp;quot;SHELVED_OFFLOADED&amp;quot;&lt;/p&gt;

&lt;p&gt;Now let&amp;#39;s unshelve it &amp;amp; check status:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# nova unshelve test1
# nova list
+--------------------------------------+-------+-------------------+------------+-------------+-----------------------------------------------+
| ID                                   | Name  | Status            | Task State | Power State | Networks                                      |
+--------------------------------------+-------+-------------------+------------+-------------+-----------------------------------------------+
| 05617907-3931-414f-88f3-fd180f69fde6 | test1 | SHELVED_OFFLOADED | spawning   | Shutdown    | cookbook_network_1=10.200.0.2, 192.168.100.11 |
+--------------------------------------+-------+-------------------+------------+-------------+-----------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There we go!&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post, we worked with one of the new-ish features in Nova, instance shelving. Good for when you need to stop instances for a long time in a non-impactful way.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blueprints.launchpad.net/nova/+spec/shelve-instance&quot;&gt;Blueprint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.openstack.org/user-guide/content/shelve_server.html&quot;&gt;OpenStack Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Running Rackspace Private Cloud on the Rackspace Public Cloud</title>
   <link href="http://lanyon.getpoole.com/2014/10/13/Running-Rackspace-Private-Cloud-on-the-Rackspace-Public-Cloud/"/>
   <updated>2014-10-13T00:00:00-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/10/13/Running-Rackspace-Private-Cloud-on-the-Rackspace-Public-Cloud</id>
   <content type="html">&lt;p&gt;Private Cloud on the Public Cloud? As odd as that sounds, or as inception as it makes you feel (Clouds in clouds?!), I&amp;#39;ve found that since downsizing my homelab quite a bit, I&amp;#39;ve needed to find other ways to work on and try out various things that exceed the capacity of my laptop. RPC 9 is one of them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I work for Rackspace, and while this post is largely focused around two of our products, I put it out here in the hopes that a) someone will find it useful, and b) it&amp;#39;ll help me later.&lt;/p&gt;

&lt;h2&gt;Rackspace Private Cloud (RPC)&lt;/h2&gt;

&lt;p&gt;Our docs will do it a lot more justice in terms of description than I can, so I encourage you to go &lt;a href=&quot;http://docs.rackspace.com/rpc/api/v9/bk-rpc-installation/content/index.html&quot;&gt;here&lt;/a&gt; and take a few minutes to get familiar.&lt;/p&gt;

&lt;p&gt;A few things I want to point out are related to the architecture of RPC9, specifically:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://docs.rackspace.com/rpc/api/v9/bk-rpc-installation/content/figures/1/a/a/a/rpc-common/figures/rpc9-environment-overview.png&quot; alt=&quot;RPC Infrastructure&quot;&gt;&lt;/p&gt;

&lt;p&gt;Looking over the diagram, there are a &lt;em&gt;lot&lt;/em&gt; of hosts involved now. 3x Infrastructure nodes, a logging host, n-Compute hosts, deployment hosts, and finally a set of load balancers. This thing is big. Bigger than my laptop that&amp;#39;s for sure.&lt;/p&gt;

&lt;h2&gt;Running Cloud on Cloud&lt;/h2&gt;

&lt;p&gt;Thankfully, however, while it&amp;#39;s big, the folks who wrote this provided some OpenStack Heat templates that make setting it up externally much easier. Those can be found &lt;a href=&quot;https://github.com/rcbops/ansible-lxc-rpc/tree/master/scripts&quot;&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;To build the cloud on the cloud you&amp;#39;ll need the following info &amp;amp; apps installed somewhere you have access to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An &amp;quot;heatrc&amp;quot; or similar file containing

&lt;ul&gt;
&lt;li&gt;Rackspace Username&lt;/li&gt;
&lt;li&gt;Rackspace API Key&lt;/li&gt;
&lt;li&gt;Endpoint(s) to deploy to&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Python-HeatClient&lt;/li&gt;
&lt;li&gt;An SSH Key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create the &amp;quot;heatrc&amp;quot; file, start with the below template and then edit as needed:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;export OS_USERNAME=rackspace_cloud_username
export OS_PASSWORD=rackspace_cloud_password
export OS_TENANT_ID=rackspace_cloud_account_number
export OS_AUTH_URL=https://identity.api.rackspacecloud.com/v2.0/
export HEAT_URL=https://ord.orchestration.api.rackspacecloud.com/v1/${OS_TENANT_ID}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; OS&lt;em&gt;TENANT&lt;/em&gt;ID is your cloud account number. You can get to this by logging into mycloud.rackspace.com and clicking your account name in the upper right.&lt;/p&gt;

&lt;p&gt;Once you&amp;#39;ve created the file and replaced said values, install the Heat client: &lt;code&gt;pip install python-heatclient&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;Installing RPC 9 on the Rackspace Public Cloud&lt;/h3&gt;

&lt;p&gt;To kick off the installation, follow these commands:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;curl https://raw.githubusercontent.com/rcbops/ansible-lxc-rpc/master/scripts/rpc9.0.0-aio-rax-heat-template.yml &amp;gt; rpc9-rax-heat.yaml

source ./heatrc

heat stack-create RPC9-Stack -f ./rpc9-rax-heat.yaml \
  -P image_name=&amp;quot;Ubuntu 14.04 LTS (Trusty Tahr)&amp;quot; \
  -P ssh_key_name=&amp;quot;lol_ssh_key&amp;quot; \
  -P flavor_name=&amp;quot;8 GB Performance&amp;quot;

+--------------------------------------+------------+--------------------+----------------------+
| id                                   | stack_name | stack_status       | creation_time        |
+--------------------------------------+------------+--------------------+----------------------+
| c2b6c1b0-0098-441d-9999-c778b108a181 | RPC9-Stack | CREATE_IN_PROGRESS | 2014-10-13T15:13:58Z |
+--------------------------------------+------------+--------------------+----------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This next part takes quite a bit of time to complete and is why we used a performance instance, to make the provision happen just a bit faster. You can keep an eye on it&amp;#39;s build status with &lt;code&gt;watch -n 15 heat stack-list&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once it completes, you will need to find out what IP address it has been assigned, to do that, use these commands: &lt;/p&gt;

&lt;p&gt;List the stacks:
&lt;code&gt;
$ heat stack-list
+--------------------------------------+------------+-----------------+----------------------+
| id                                   | stack_name | stack_status    | creation_time        |
+--------------------------------------+------------+-----------------+----------------------+
| c2b6c1b0-0098-441d-9999-c778b108a181 | RPC9-Stack | CREATE_COMPLETE | 2014-10-13T15:13:58Z |
+--------------------------------------+------------+-----------------+----------------------+
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;List the available outputs:
&lt;code&gt;
$ heat output-list RPC9-Stack
+------------------+-------------------------------------------------------+
| output_key       | description                                           |
+------------------+-------------------------------------------------------+
| RPCAIO_password  | The password for all the things.                      |
| RPCAIO_public_ip | The public IP address of the newly configured Server. |
+------------------+-------------------------------------------------------+
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finally show the IP:
&lt;code&gt;
$ heat output-show RPC9-Stack RPCAIO_public_ip
&amp;quot;127.0.0.100&amp;quot;
&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post we showed you how to nest the Rackspace Private Cloud installation on the Rackspace Public Cloud. A useful trick for testing it out without having to use &lt;em&gt;ALL&lt;/em&gt; your local resources up.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>OpenStack Cookbook 3rd Edition</title>
   <link href="http://lanyon.getpoole.com/2014/10/10/OpenStack-Cookbook-3rd-Edition/"/>
   <updated>2014-10-10T00:00:00-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/10/10/OpenStack-Cookbook-3rd-Edition</id>
   <content type="html">&lt;p&gt;Oh Oh Oh! The lesson in book writing is that it is both terrible and addictive. That is, right as we wrapped the second edition of the OpenStack Cookbook, I promised myself &amp;quot;Never again!&amp;quot;.&lt;/p&gt;

&lt;p&gt;Now, some number of months later, &lt;a href=&quot;https://twitter.com/itarchitectkev&quot;&gt;Kevin&lt;/a&gt; and myself, we&amp;#39;ve chatted a bit, and have decided to go down that road to update the book again. Indeed, we&amp;#39;re also looking at bringing &lt;a href=&quot;https://twitter.com/eglute&quot;&gt;Egle&lt;/a&gt; along for the ride this time.&lt;/p&gt;

&lt;h2&gt;3rd Edition Highlights&lt;/h2&gt;

&lt;p&gt;The third edition will target either a late Juno or early Kilo release (Hooray Relevancy!). In addition to general updates, were adding or overhauling the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenStack Datacenter Automation&lt;/li&gt;
&lt;li&gt;OpenStack Scaling&lt;/li&gt;
&lt;li&gt;Image Management &amp;amp; Conversion&lt;/li&gt;
&lt;li&gt;More Operations Recipes&lt;/li&gt;
&lt;li&gt;HTTPS!&lt;/li&gt;
&lt;li&gt;OpenStack Heat&lt;/li&gt;
&lt;li&gt;Additional Neutron Services (LBaaS, VPNaaS)&lt;/li&gt;
&lt;li&gt;Using 3rd Party drivers&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>30 Posts in 30 Days</title>
   <link href="http://lanyon.getpoole.com/2014/10/09/30-Posts-in-30-Days/"/>
   <updated>2014-10-09T00:00:00-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/10/09/30-Posts-in-30-Days</id>
   <content type="html">&lt;p&gt;I found this morning I was in a bit of a blogging slump. That is, I&amp;#39;d not posted anything in quite a while, even though I have plenty of exciting things going on at the moment. So, with that said, happening across &lt;a href=&quot;http://etherealmind.com/challenge-30-blogs-30-days/&quot;&gt;this post&lt;/a&gt; by Greg Ferro (&lt;a href=&quot;http://twitter.com/@etherealmind&quot;&gt;@etherealmind&lt;/a&gt;), I thought I&amp;#39;d jump into the fray.&lt;/p&gt;

&lt;p&gt;I encourage you to do the same.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Currently Reading - Sept 2014</title>
   <link href="http://lanyon.getpoole.com/2014/09/12/Currently-Reading---Sept-2014/"/>
   <updated>2014-09-12T00:00:00-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/09/12/Currently-Reading---Sept-2014</id>
   <content type="html">&lt;p&gt;I&amp;#39;ve found overtime my reading habbits have changed from mostly tech books to a fair mix of things, with some things that suprised even me... business books. o.O? Here&amp;#39;s what&amp;#39;s currently on my list and in progress, first the boring ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Curve-Freeloaders-Superfans-Future-Business-ebook/dp/B00C5R7B6W/ref=sr_1_1_bnp_1_kin?ie=UTF8&amp;amp;qid=1410211612&amp;amp;sr=8-1&amp;amp;keywords=the+curve+how+smart+companies+find+high+value&quot;&gt;The Curve: How Smart Companies Find High-Value Customers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman-ebook/dp/B00555X8OA/ref=sr_1_1_bnp_1_kin?ie=UTF8&amp;amp;qid=1410211622&amp;amp;sr=8-1&amp;amp;keywords=thinking+fast+and+slow&quot;&gt;Thinking, Fast and Slow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Vagrant-Up-Running-Mitchell-Hashimoto-ebook/dp/B00D3VH4IO&quot;&gt;Vagrant: Up and Running&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Art-Learning-Journey-Pursuit-Excellence-ebook/dp/B000QCQ970/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1410546893&amp;amp;sr=1-1&amp;amp;keywords=the+art+of+learning&quot;&gt;The Art of Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/SYSTEMANTICS-SYSTEMS-BIBLE-John-Gall-ebook/dp/B00AK1BIDM/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1410546946&amp;amp;sr=1-1&amp;amp;keywords=systemantics&quot;&gt;Systemantics. The Systems Bible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Essential-Drucker-Collins-Business-Essentials-ebook/dp/B000FC11LK/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1410546958&amp;amp;sr=1-1&amp;amp;keywords=essential+drucker&quot;&gt;The Essential Drucker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Pragmatism-Other-Writings-Penguin-Classics/dp/0140437355/ref=sr_1_1?ie=UTF8&amp;amp;qid=undefined&amp;amp;sr=8-1&amp;amp;keywords=pragmatism+and+other+essays&quot;&gt;Pragmatism and Other Writings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://markburgess.org/BookOfPromises.pdf&quot;&gt;Book of Promises&lt;/a&gt; Promise Theory!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://arxiv.org/pdf/0810.3294v5.pdf&quot;&gt;A static Theory of Promises&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then on the more fun side:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Brightness-Reef-Uplift-Trilogy-Book/dp/0553573306/ref=la_B000APAXV6_1_7?s=books&amp;amp;ie=UTF8&amp;amp;qid=1410547103&amp;amp;sr=1-7&quot;&gt;Brightness Reef&lt;/a&gt; and the rest of said series.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Gardens-Moon-Book-Malazan-Fallen-ebook/dp/B002KYHZLQ/ref=tmm_kin_swatch_0?_encoding=UTF8&amp;amp;sr=1-3-fkmr0&amp;amp;qid=1410547192&quot;&gt;Gardens of the Moon: Book 1 of The Malazan Book of the Fallen&lt;/a&gt; and the rest of that series.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Geek-Dads-Guide-Weekend-Fun-ebook/dp/B004RKXO16/ref=sr_1_2?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1410547255&amp;amp;sr=1-2&amp;amp;keywords=geek+dad&quot;&gt;Geek Dad&amp;#39;s Weekend Fun&lt;/a&gt;, Doing a project every weekend or so.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Echopraxia-Peter-Watts-ebook/dp/B00IHCBDJ0/ref=tmm_kin_swatch_0?_encoding=UTF8&amp;amp;sr=&amp;amp;qid=&quot;&gt;Echopraxia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>MariaDB With Galera on Vagrant</title>
   <link href="http://lanyon.getpoole.com/2014/09/10/MariaDB-With-Galera-on-Vagrant/"/>
   <updated>2014-09-10T00:00:00-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/09/10/MariaDB-With-Galera-on-Vagrant</id>
   <content type="html">&lt;p&gt;Found myself in some training this last week using MariaDB, and being that I like to get a bit more hands on than most, using the class provided lab environment wasn&amp;#39;t going to cut it. This meant wrapping some scripting into a Vagrant environment so I could reliably reporduce the three node lab.&lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;You&amp;#39;ll need Vagrant and Git. It&amp;#39;s also preferred that you have vagrant-cachier installed. You should have vagrant-cachier anyways, but alas, that is not for right now. Once you have these out of the way, do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/bunchc/mariadb-galera-vagrant.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd mariadb-galera-vagrant&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vagrant up&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;Validating the Cluster&lt;/h2&gt;

&lt;p&gt;After a few minutes, you should be able to log into any of the nodes. Specifically, node-01 will be used to &amp;#39;bootstrap&amp;#39; the cluster, the other two nodes will join from there.&lt;/p&gt;

&lt;p&gt;To validate the cluster:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;vagrant ssh mariadb-02
sudo su -
mysql -uroot
SHOW GLOBAL STATUS LIKE &amp;#39;wsrep%&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should be able to do the above from any of the nodes in the cluster.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Raspberry Pi as PXE Server</title>
   <link href="http://lanyon.getpoole.com/2014/08/19/Raspberry-Pi-as-PXE-Server/"/>
   <updated>2014-08-19T00:00:00-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/08/19/Raspberry-Pi-as-PXE-Server</id>
   <content type="html">&lt;p&gt;As I start to move from OpenStack Compute Cells in Devstack to OpenStack Compute Cells physicall, I needed to re-think my homelab some. It had been running some variation of vsphere and the OpenStack Cookbook work from various projects prior. Basically, it was a Hodor of a home lab.&lt;/p&gt;

&lt;h2&gt;Hodor!&lt;/h2&gt;

&lt;p&gt;Rather than lose a bit of hardware to foreman, or one of the new razor forks (I may still go this route later), I decided instead to pound a Raspberry Pi into service. To turn the rPI into a usable provisioning server, I did the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Provision a 16gb card with Raspbian&lt;/li&gt;
&lt;li&gt;Beat Networking Into Submission&lt;/li&gt;
&lt;li&gt;Setup IP Tables for Nat&lt;/li&gt;
&lt;li&gt;Configure DHCP, PXE, TFTP, etc&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We&amp;#39;ll skip step 1 as the folks at &lt;a href=&quot;http://www.raspberrypi.org/&quot;&gt;raspberrypi.org&lt;/a&gt; cover that pretty well already.&lt;/p&gt;

&lt;h2&gt;Beat Networking Into Submission&lt;/h2&gt;

&lt;p&gt;So the rPI does some auto-hotplugging bits that can cause you some issues if you try to use both wifi and ethernet at the same time. If you&amp;#39;re not expecting them, well... let&amp;#39;s just say I spent too long trying to solve before googling the problem. Here&amp;#39;s what my networking config files look like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# cat /etc/network/interfaces
auto lo
iface lo inet loopback

auth eth0
allow-hotplug eth0
iface eth0 inet static
    address 172.16.0.1
    netmask 255.255.255.0

auto wlan0
allow-hotplug wlan0
iface wlan0 inet static
wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
    address 10.0.1.15
    netmask 255.255.255.0
    broadcast 10.0.1.255
    gateway 10.0.1.1

iface default inet dhcp

# cat /etc/default/ifplugd
INTERFACES=&amp;quot;eth0&amp;quot;
HOTPLUG_INTERFACES=&amp;quot;eth0&amp;quot;
ARGS=&amp;quot;-q -f -u0 -d10 -w -I&amp;quot;
SUSPEND_ACTION=&amp;quot;stop&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you have that, reboot the rPI and you should be good to go.&lt;/p&gt;

&lt;h2&gt;Setup IP Tables for NAT&lt;/h2&gt;

&lt;p&gt;This is also pretty well straight forward, but for some reason I end up googling it each time. Here it is for reference:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# NAT
iptables --table nat --append POSTROUTING --out-interface wlan0 -j MASQUERADE
iptables --append FORWARD --in-interface eth0 -j ACCEPT
iptables-save | sudo tee /etc/iptables.conf
iptables-restore &amp;lt; /etc/iptables.conf
sh -c &amp;quot;echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward&amp;quot;
sed -i &amp;quot;s/exit 0/iptables-restore &amp;lt; \/etc\/\iptables.conf \nexit 0/g&amp;quot; /etc/rc.local
sed -i &amp;quot;s/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/g&amp;quot; /etc/sysctl.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Configure DHCP, PXE, TFTP, etc&lt;/h2&gt;

&lt;p&gt;This one is a bit more involved, but is all done via the following bash commands:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;MY_IP=$(ifconfig eth0 | awk &amp;#39;/inet addr/ {split ($2,A,&amp;quot;:&amp;quot;); print A[2]}&amp;#39;)

# Install the things
sudo apt-get install -y dnsmasq nfs-kernel-server syslinux-common

# Setup some shell folders
sudo mkdir -p /tftpboot/images/ubuntu/14.04/amd64
sudo cp -r /usr/lib/syslinux/* /tftpboot/
sudo mkdir -p /tftpboot/pxelinux.cfg/Ubuntu
sudo cp /usr/lib/syslinux/vesamenu.c32 /tftpboot/

# Create a pxe.conf file
sudo cat &amp;gt; /tftpboot/pxelinux.cfg/pxe.conf &amp;lt;&amp;lt;EOF
MENU TITLE  PXE Server 
NOESCAPE 1
ALLOWOPTIONS 1
PROMPT 0
MENU WIDTH 80
MENU ROWS 14
MENU TABMSGROW 24
MENU MARGIN 10
MENU COLOR border               30;44      #ffffffff #00000000 std
EOF

# Create our PXE Menu
sudo cat &amp;gt; /tftpboot/pxelinux.cfg/default &amp;lt;&amp;lt;EOF
DEFAULT vesamenu.c32 
TIMEOUT 600
ONTIMEOUT BootLocal
PROMPT 0
MENU INCLUDE pxelinux.cfg/pxe.conf
NOESCAPE 1
LABEL BootLocal
        localboot 0
        TEXT HELP
        Boot to local hard disk
        ENDTEXT
MENU BEGIN Ubuntu
MENU TITLE Ubuntu 
        LABEL Previous
        MENU LABEL Previous Menu
        TEXT HELP
        Return to previous menu
        ENDTEXT
        MENU EXIT
        MENU SEPARATOR
        MENU INCLUDE Ubuntu/Ubuntu.menu
MENU END
EOF

sudo cat &amp;gt; /tftpboot/pxelinux.cfg/Ubuntu/Ubuntu.menu &amp;lt;&amp;lt;EOF
LABEL 2
        MENU LABEL Ubuntu 14.04 (64-bit)
        kernel tftp://$MY_IP/images/ubuntu/14.04/amd64/install/netboot/ubuntu-installer/amd64/linux
        append auto=true priority=critical vga=788 initrd=tftp://$MY_IP/images/ubuntu/14.04/amd64/install/netboot/ubuntu-installer/amd64/initrd.gz locale=en_US.UTF-8 kbd-chooser/method=us netcfg/choose_interface=auto url=tftp://172.16.11.250/preseed.cfg
        TEXT HELP
        Boot the Ubuntu 14.04 64-bit DVD
        ENDTEXT
EOF

# Configure dnsmasq for tftp &amp;amp; dhcp
sudo cat &amp;gt;&amp;gt; /etc/dnsmasq.conf &amp;lt;&amp;lt;EOF
server=$MY_IP@eth0
interface=eth0
no-dhcp-interface=wlan0
dhcp-range=172.16.0.10,172.16.0.253,12h
dhcp-boot=pxelinux.0
pxe-service=x86PC,&amp;quot;Booting from Network...&amp;quot;,pxelinux
enable-tftp
tftp-root=/tftpboot
dhcp-boot=pxelinux.0,servername,$MY_IP
EOF
sudo service dnsmasq restart

# Get 14.04 and extract the needful
wget -O ~/ubuntu-14.04-server-amd64.iso http://mirror.anl.gov/pub/ubuntu-iso/CDs/trusty/ubuntu-14.04.1-server-amd64.iso

sudo mkdir /mnt/loop
sudo mount -o loop -t iso9660 ~/ubuntu-14.04-server-amd64.iso /mnt/loop
sudo cp -R /mnt/loop/* /tftpboot/images/ubuntu/14.04/amd64
sudo cp -R /mnt/loop/.disk /tftpboot/images/ubuntu/14.04/amd64
sudo umount /mnt/loop

# Get a generic preseed
wget -O /tftpboot/preseed.cfg https://help.ubuntu.com/lts/installation-guide/example-preseed.txt

# Setup NFS mounts
echo &amp;quot;
/tftpboot/images/ubuntu/    *(ro,sync,no_subtree_check)&amp;quot; | sudo tee -a /etc/exports

# Enable RPCBind, NFS, and restart them
update-rc.d rpcbind enable &amp;amp;&amp;amp; update-rc.d nfs-common enable
service rpcbind start
service nfs-kernel-server restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The commands themselves are commented pretty well. Generically what they do is install dnsmasq for dhcp &amp;amp; tftp. From there we download and extract all the things from the ISO that we&amp;#39;ll need, configure some menus, download a basic preseed, and restart some services.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post, we took a lowly Raspberry Pi and indentured it into some network servitude as a pxe / tftp server. We did this by installing and configuring dnsmasq for tftp and dhcp. Additionally we set up some fancy pxeboot menus and configured them to boot locally as a priority and to the network in times of need. Finally, we pulled down an Ubuntu 14.04 image and generic preseed file to use for automatic installs.&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://raspberrypi.stackexchange.com/questions/8851/setting-up-wifi-and-ethernet&quot;&gt;http://raspberrypi.stackexchange.com/questions/8851/setting-up-wifi-and-ethernet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://it-joe.com/howtos/pxe.php&quot;&gt;http://it-joe.com/howtos/pxe.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wernerstrydom.com/2014/05/25/automatically-installing-ubuntu-server-14-04-tftp/&quot;&gt;http://wernerstrydom.com/2014/05/25/automatically-installing-ubuntu-server-14-04-tftp/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Vagrant and Hanlon (The other Razor Fork)</title>
   <link href="http://lanyon.getpoole.com/2014/08/15/Vagrant-and-Hanlon-The-other-Razor-Fork/"/>
   <updated>2014-08-15T00:00:00-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/08/15/Vagrant-and-Hanlon-The-other-Razor-Fork</id>
   <content type="html">&lt;p&gt;You may or may not know that Razor, the bare-metal lifecycle tool, has forked from its original bits. This is a good thing, but it&amp;#39;s still really early days on the new forks, so we&amp;#39;ll see ultimately what plays out.&lt;/p&gt;

&lt;p&gt;The Puppet-Labs &amp;quot;Razor-Server&amp;quot; fork can be found &lt;a href=&quot;https://github.com/puppetlabs/razor-server&quot;&gt;here&lt;/a&gt;. If you want to work with it, or test it locally, you can use the bits written by Egle &lt;a href=&quot;http://anystacker.com/2014/01/vagrant-up-razor-server/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hanlon, the CSC fork &lt;a href=&quot;https://github.com/csc/Hanlon&quot;&gt;here&lt;/a&gt;, is being perused by Tom McSweeney who helped get the original razor off the ground.&lt;/p&gt;

&lt;p&gt;To help me work with it and contribute some, I&amp;#39;ve built a small Vagrant environment (largely basd on the Vagrant environment for &amp;#39;the other&amp;#39; razor.).&lt;/p&gt;

&lt;h2&gt;Vagrant Up Hanlon&lt;/h2&gt;

&lt;p&gt;To get started, clone the repo and vagrant up, like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git clone https://github.com/bunchc/vagrant-hanlon.git
cd vagrant-hanlon
vagrant up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What this does during the vagrant up process is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install dnsmasq&lt;/li&gt;
&lt;li&gt;Configure IPtables for NAT&lt;/li&gt;
&lt;li&gt;Installs Mongodb&lt;/li&gt;
&lt;li&gt;Installs Java&lt;/li&gt;
&lt;li&gt;Installs RBENV&lt;/li&gt;
&lt;li&gt;Installs both jruby and ruby 1.9.3&lt;/li&gt;
&lt;li&gt;Downloads Hanlon&lt;/li&gt;
&lt;li&gt;Starts Puma (to run Hanlon)&lt;/li&gt;
&lt;li&gt;Pulls down a few images to add to Hanlon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you have Hanlon running, command wise it works very similar to the old Razor. That is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;hanlon node
hanlon policy
hanlon image
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post, you cloned and started to work with Hanlon, one of the derivatives of the Razor bare-metal provisioning framework.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Updated Blog / Markdown workflow</title>
   <link href="http://lanyon.getpoole.com/2014/08/14/Updated-Blog--Markdown-workflow/"/>
   <updated>2014-08-14T00:00:00-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/08/14/Updated-Blog--Markdown-workflow</id>
   <content type="html">&lt;p&gt;A while ago I posted about my markdown &lt;a href=&quot;http://openstack.prov12n.com/my-markdown-workflow-for-now/&quot;&gt;workflow&lt;/a&gt;. While that workflow was decent and worked for a goodly little while, it left quite a bit to be desired. Specifically, I the posting process into Wordpress was cumbersome at best.&lt;/p&gt;

&lt;h2&gt;A New Blog Engine&lt;/h2&gt;

&lt;p&gt;Like I said above, working with Wordpress and markdown was cumbersome and then some. So it was time for something new. At first I was going to use similar to &lt;a href=&quot;https://github.com/chalupaul/chalupaul.github.io/&quot;&gt;this&lt;/a&gt;, which is actually what is in use on the &lt;a href=&quot;http://openstackcookbook.com/&quot;&gt;openstackcookbook.com&lt;/a&gt; site. It has the following benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Posts are written in Markdown&lt;/li&gt;
&lt;li&gt;Integrated with gh-pages&lt;/li&gt;
&lt;li&gt;Straighforward publishing process &lt;code&gt;git push origin master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was &lt;em&gt;almost&lt;/em&gt; what I needed. In the end I went with &lt;a href=&quot;http://hugo.spf13.com/&quot;&gt;Hugo&lt;/a&gt;. What Hugo added was some pluggable themes and templates. Also the ability to run locally before pushing to github.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To setup Hugo on github, use &lt;a href=&quot;http://hugo.spf13.com/tutorials/github_pages_blog&quot;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Current Workflow&lt;/h2&gt;

&lt;p&gt;My current workflow needed some help then. I kept the same sublime text plugins, that is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MarkdownEditing

&lt;ul&gt;
&lt;li&gt;This has a number of really handy keyboard bindings. It also has some decent highlighting and what not.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Markdown Preview

&lt;ul&gt;
&lt;li&gt;This one allows me to go from Markdown into what it’ll look like on the web.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Markdown TOC

&lt;ul&gt;
&lt;li&gt;This lets me go from a basic set of sections and files into a more full fledged table of contents.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, to create a new post, I modified the Rakefile found &lt;a href=&quot;https://github.com/chalupaul/chalupaul.github.io/blob/master/_posts/Rakefile&quot;&gt;here&lt;/a&gt;, to look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;require &amp;#39;fileutils&amp;#39;
task :post do
    title = ENV[&amp;#39;title&amp;#39;] || &amp;quot;new-post&amp;quot;
    tags = ENV[&amp;#39;tags&amp;#39;] || &amp;#39;&amp;#39;
    make_img_dir = ENV[&amp;#39;imgdir&amp;#39;] || false
    date = (ENV[&amp;#39;date&amp;#39;] ? Time.parse(ENV[&amp;#39;date&amp;#39;]) : Time.now).strftime(&amp;#39;%Y-%m-%d&amp;#39;)
    filename = File.join(&amp;#39;.&amp;#39;, &amp;quot;#{Time.now.strftime(&amp;#39;%Y-%m-%d&amp;#39;)}-#{title.strip.gsub(&amp;#39; &amp;#39;, &amp;#39;-&amp;#39;).gsub(/[^\w-]/, &amp;#39;&amp;#39;)}.md&amp;quot;)
    open(filename, &amp;#39;w&amp;#39;) do |post|
        post.puts &amp;quot;---&amp;quot;
        post.puts &amp;quot;title: \&amp;quot;#{title}\&amp;quot;&amp;quot;
        post.puts &amp;quot;date: #{Time.now.strftime(&amp;#39;%Y-%m-%d&amp;#39;)}&amp;quot;
        post.puts &amp;quot;categories: &amp;quot;
        post.puts &amp;quot;---&amp;quot;
        post.puts &amp;quot;\nYour content here.&amp;quot;
        if make_img_dir
            img_dir = File.basename(filename.chomp(File.extname(filename)))
            FileUtils.mkdir_p(&amp;quot;../images/posts/#{img_dir}&amp;quot;)
            post.puts &amp;quot;\n&amp;quot; * 5
            post.puts &amp;quot;[imgdir]: /images/posts/#{img_dir}/&amp;quot;
        end
    end
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So creating a new post goes like this:
bunchc: blog/content/posts$ rake post title=&amp;quot;Title Here&amp;quot;&lt;/p&gt;

&lt;p&gt;In turn, that creates a YYYY-MM-DD-Title-Here.md file for editing in sublime. It also adds the metadata section at the top of the file for me:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;---
title: &amp;quot;Updated Blog / Markdown workflow&amp;quot;
date: 2014-08-14
categories: 
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there, I write the file, save the file, and run &lt;code&gt;./deploy.sh&lt;/code&gt; from the Hugo installer linked earlier. That handles all the pushing and bits to git.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;The gist of it is, Wordpress was a bit much and a bit heavy for what I needed. Hugo, Markdown, and GitHub Pages gave me a streamlined process that looks decent for posting.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Multi-Node Devstack with Neutron and Cells</title>
   <link href="http://lanyon.getpoole.com/2014/08/14/Multi-Node-Devstack-with-Neutron-and-Cells/"/>
   <updated>2014-08-14T00:00:00-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/08/14/Multi-Node-Devstack-with-Neutron-and-Cells</id>
   <content type="html">&lt;p&gt;OpenStack Cells allow you to break up Nova into smaller domains. In turn, this allows for a number of interesting things. Not the least of which is scale.&lt;/p&gt;

&lt;p&gt;From the OpenStack.org docs: &lt;strong&gt;Note&lt;/strong&gt; &lt;em&gt;I&amp;#39;ve added the bold on some important points.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cells functionality enables you to scale an OpenStack Compute cloud in a more distributed fashion without having to use complicated technologies like database and message queue clustering. It supports very large deployments.&lt;/p&gt;

&lt;p&gt;When this functionality is enabled, the hosts in an OpenStack Compute cloud are partitioned into groups called cells. Cells are configured as a tree. The top-level cell should have a host that runs a nova-api service, but no nova-compute services. Each child cell should run all of the typical nova-* services in a regular Compute cloud except for nova-api. &lt;strong&gt;You can think of cells as a normal Compute deployment in that each cell has its own database server and message queue broker.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, in addition to breaking down at physical boundaries or failure domains, you can break nova-compute into smaller chunks based on DB and MQ scaling limits. &lt;/p&gt;

&lt;p&gt;However, not all of us have multi-geo hundred plus node compute labs to play with... so how do we test out this functionality before hand? Devstack!&lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;tl;dr - &lt;code&gt;git clone https://github.com/bunchc/devstack-cells.git; cd devstack-cells; vagrant up&lt;/code&gt;, and go to &amp;quot;Configuring and Creating Cells&amp;quot;&lt;/p&gt;

&lt;p&gt;To get started, you&amp;#39;ll need the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;virtualbox (fusion or workstation work just as well)&lt;/li&gt;
&lt;li&gt;a minimum of two Ubuntu 14.04 VM with:

&lt;ul&gt;
&lt;li&gt;About 2GB ram&lt;/li&gt;
&lt;li&gt;2x networks

&lt;ul&gt;
&lt;li&gt;eth0 = NAT&lt;/li&gt;
&lt;li&gt;eth1 = host only&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Both Nodes&lt;/h3&gt;

&lt;p&gt;Once you have that taken care of, on each node we need to create a stack user:
&lt;code&gt;
sudo adduser --disabled-password --gecos &amp;quot;&amp;quot; stack
echo &amp;quot;stack ALL=(ALL) NOPASSWD: ALL&amp;quot; &amp;gt;&amp;gt; /etc/sudoers
&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;Parent Node&lt;/h3&gt;

&lt;p&gt;Time to Download devstack:
&lt;code&gt;
sudo su - stack
git clone -b stable/icehouse https://github.com/openstack-dev/devstack 
&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note the sudo command. Everything from this point is done as stack&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, let&amp;#39;s make the local.conf file:
```
echo &amp;quot;
[[local|localrc]]
ADMIN&lt;em&gt;PASSWORD=$ADMIN&lt;/em&gt;PASSWORD
DATABASE&lt;em&gt;PASSWORD=$ADMIN&lt;/em&gt;PASSWORD
RABBIT&lt;em&gt;PASSWORD=$ADMIN&lt;/em&gt;PASSWORD
SERVICE&lt;em&gt;PASSWORD=$ADMIN&lt;/em&gt;PASSWORD
SERVICE_TOKEN=a682f596-76f3-11e3-b3b2-e716f9080d50&lt;/p&gt;

&lt;p&gt;GIT&lt;em&gt;BASE=${GIT&lt;/em&gt;BASE:-https://git.openstack.org}&lt;/p&gt;

&lt;h1&gt;Cells!&lt;/h1&gt;

&lt;p&gt;ENABLED&lt;em&gt;SERVICES+=,n-cell,n-api-meta
DISABLED&lt;/em&gt;SERVICE+=,n-cpu,n-net,n-sch&lt;/p&gt;

&lt;h1&gt;Neutron - Networking Service&lt;/h1&gt;

&lt;h1&gt;If Neutron is not declared the old good nova-network will be used&lt;/h1&gt;

&lt;p&gt;ENABLED_SERVICES+=,q-svc,q-agt,q-dhcp,q-l3,q-meta,neutron,q-lbaas,q-vpn,q-fwaas&lt;/p&gt;

&lt;h1&gt;Neutron Stuff&lt;/h1&gt;

&lt;p&gt;OVS&lt;em&gt;VLAN&lt;/em&gt;RANGES=RegionOne:1:4000
OVS&lt;em&gt;ENABLE&lt;/em&gt;TUNNELING=False&lt;/p&gt;

&lt;h2&gt;Images&lt;/h2&gt;

&lt;h1&gt;32bit image (~660MB)&lt;/h1&gt;

&lt;p&gt;IMAGE_URLS+=&amp;quot;,http://fedorapeople.org/groups/heat/prebuilt-jeos-images/F19-i386-cfntools.qcow2&amp;quot;&lt;/p&gt;

&lt;h1&gt;64bit image (~640MB)&lt;/h1&gt;

&lt;p&gt;IMAGE&lt;em&gt;URLS+=&amp;quot;,http://fedorapeople.org/groups/heat/prebuilt-jeos-images/F19-x86&lt;/em&gt;64-cfntools.qcow2&amp;quot;
IMAGE&lt;em&gt;URLS+=&amp;quot;,http://mirror.chpc.utah.edu/pub/fedora/linux/releases/20/Images/x86&lt;/em&gt;64/Fedora-x86&lt;em&gt;64-20-20131211.1-sda.qcow2&amp;quot;
IMAGE&lt;/em&gt;URLS+=&amp;quot;,http://launchpad.net/cirros/trunk/0.3.0/+download/cirros-0.3.0-x86_64-uec.tar.gz&amp;quot;&lt;/p&gt;

&lt;h1&gt;Output&lt;/h1&gt;

&lt;p&gt;LOGFILE=/opt/stack/logs/stack.sh.log
VERBOSE=True
LOG&lt;em&gt;COLOR=False
SCREEN&lt;/em&gt;LOGDIR=/opt/stack/logs
&amp;quot; | tee -a /home/stack/devstack/local.conf
```&lt;/p&gt;

&lt;p&gt;The important bit for cells in this file are:
&lt;code&gt;
ENABLED_SERVICES+=,n-cell,n-api-meta
DISABLED_SERVICE+=,n-cpu,n-net,n-sch
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This enables the cell service, and the nova-api metadata service. It then disables compute, nova-networking, and the scheduler. Those tasks will be handled on the children.&lt;/p&gt;

&lt;p&gt;With that out of the way run &lt;code&gt;./stack.sh&lt;/code&gt; and grab a coffee. When it completes, add the following to &lt;code&gt;/etc/nova/nova.conf&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[cells]
enable=True
name=api
cell_type=api
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, restart the n-api serivice.&lt;/p&gt;

&lt;h3&gt;Child Node&lt;/h3&gt;

&lt;p&gt;Time to Download devstack:
&lt;code&gt;
sudo su - stack
git clone -b stable/icehouse https://github.com/openstack-dev/devstack 
&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note the sudo command. Everything from this point is done as stack&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, on the child node, we create a local.conf file
```
cd devstack
echo &amp;quot;
[[local|localrc]]
ADMIN&lt;em&gt;PASSWORD=$ADMIN&lt;/em&gt;PASSWORD
DATABASE&lt;em&gt;PASSWORD=$ADMIN&lt;/em&gt;PASSWORD
RABBIT&lt;em&gt;PASSWORD=$ADMIN&lt;/em&gt;PASSWORD
SERVICE&lt;em&gt;PASSWORD=$ADMIN&lt;/em&gt;PASSWORD
SERVICE_TOKEN=a682f596-76f3-11e3-b3b2-e716f9080d50&lt;/p&gt;

&lt;p&gt;HOST&lt;em&gt;IP=&lt;ipaddres of eth0&gt;
SERVICE&lt;/em&gt;HOST=&lt;ip address of controllers eth0&gt;
MYSQL&lt;em&gt;HOST=$SERVICE&lt;/em&gt;HOST
RABBIT&lt;em&gt;HOST=$SERVICE&lt;/em&gt;HOST
Q&lt;em&gt;HOST=$SERVICE&lt;/em&gt;HOST
GLANCE&lt;em&gt;HOSTPORT=$SERVICE&lt;/em&gt;HOST:9292&lt;/p&gt;

&lt;p&gt;GIT&lt;em&gt;BASE=${GIT&lt;/em&gt;BASE:-https://git.openstack.org}&lt;/p&gt;

&lt;h1&gt;Cells!&lt;/h1&gt;

&lt;p&gt;ENABLED&lt;em&gt;SERVICES+=,n-cell
DISABLED&lt;/em&gt;SERVICE+=,n-api,key,g-api&lt;/p&gt;

&lt;h1&gt;Neutron - Networking Service&lt;/h1&gt;

&lt;h1&gt;If Neutron is not declared the old good nova-network will be used&lt;/h1&gt;

&lt;p&gt;ENABLED_SERVICES+=,q-svc,q-agt,q-dhcp,q-l3,q-meta,neutron,q-lbaas,q-vpn,q-fwaas&lt;/p&gt;

&lt;h1&gt;Neutron Stuff&lt;/h1&gt;

&lt;p&gt;OVS&lt;em&gt;VLAN&lt;/em&gt;RANGES=RegionOne:1:4000
OVS&lt;em&gt;ENABLE&lt;/em&gt;TUNNELING=False&lt;/p&gt;

&lt;h1&gt;Output&lt;/h1&gt;

&lt;p&gt;LOGFILE=/opt/stack/logs/stack.sh.log
VERBOSE=True
LOG&lt;em&gt;COLOR=False
SCREEN&lt;/em&gt;LOGDIR=/opt/stack/logs
&amp;quot; | tee -a /home/stack/devstack/local.conf
```&lt;/p&gt;

&lt;p&gt;The important bit for cells is:
&lt;code&gt;
ENABLED_SERVICES+=,n-cell
DISABLED_SERVICE+=,n-api,key,g-api
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This enables the cell service and turns of keystone along with nova-api and glance-api services. Those in turn will be handled by the parent.&lt;/p&gt;

&lt;p&gt;Next, run &lt;code&gt;./stack.sh&lt;/code&gt; and grab a coffee. When it completes, add the following to &lt;code&gt;/etc/nova/nova.conf&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[cells]
enable=True
name=cell1
cell_type=comput
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Configuring and Creating Cells&lt;/h2&gt;

&lt;p&gt;Ok, what happened above was we got two nodes up and running and ready to go with Devstack and the prerequsite services for cells. Now we actually have to actuall make the cells. To do that:&lt;/p&gt;

&lt;h3&gt;Parent&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;nova-manage cell create --name=cell1 --cell_type=child --username=guest --password=password --hostname=&amp;lt;child ip&amp;gt; --port=5672 --virtual_host=/ --woffset=1.0 --wscale=1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then in screen, find the n-cell-* services and restart them.&lt;/p&gt;

&lt;h3&gt;Child&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;nova-manage cell create --name=parent --cell_type=parent --username=guest --password=password --hostname=&amp;lt;parent ip&amp;gt; --port=5672 --virtual_host=/ --woffset=1.0 --wscale=1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then in screen, find the n-cell-* services and restart them.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this post, we created two virtual machines, installed Devstack while enabling nova-cells. Finally, we actually configured the cells to talk to one another. This post was largely an amalgamation of two other posts highlighted in the resources section&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://openlystacking.blogspot.com/2013/07/creating-cell-environment-using-devstack.html&quot;&gt;http://openlystacking.blogspot.com/2013/07/creating-cell-environment-using-devstack.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.xlcloud.org/bin/view/Blog/Devstack+with+Quantum+in+a+multi-node+configuration?language=en&quot;&gt;http://www.xlcloud.org/bin/view/Blog/Devstack+with+Quantum+in+a+multi-node+configuration?language=en&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Linkdump Bare-Metal Edition</title>
   <link href="http://lanyon.getpoole.com/2014/08/13/Linkdump-Bare-Metal-Edition/"/>
   <updated>2014-08-13T11:17:13-05:00</updated>
   <id>http://lanyon.getpoole.com/2014/08/13/Linkdump-Bare-Metal-Edition</id>
   <content type="html">&lt;p&gt;Here goes the first post on the Hugo platform on the github blog. Some links I had to close out as I consolidated memory to fire up a multi-devstack.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://theforeman.org/manuals/1.5/quickstart_guide.html&quot;&gt;http://theforeman.org/manuals/1.5/quickstart_guide.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/theforeman/foreman_discovery&quot;&gt;https://github.com/theforeman/foreman_discovery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cobblerd.org/&quot;&gt;http://www.cobblerd.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ma.ttwagner.com/bare-metal-deploys-with-devstack-and-ironic/&quot;&gt;http://ma.ttwagner.com/bare-metal-deploys-with-devstack-and-ironic/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 

</feed>
