<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on blog.codybunch.com - The random msuings of an IT guy </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://blog.codybunch.com/index.xml</link>
    
    
    
    <updated>Mon, 13 Oct 2014 00:00:00 UTC</updated>
    
    <item>
      <title>Running Rackspace Private Cloud on the Rackspace Public Cloud</title>
      <link>http://blog.codybunch.com/posts/2014-10-13-Running-Rackspace-Private-Cloud-on-the-Rackspace-Public-Cloud</link>
      <pubDate>Mon, 13 Oct 2014 00:00:00 UTC</pubDate>
      
      <guid>http://blog.codybunch.com/posts/2014-10-13-Running-Rackspace-Private-Cloud-on-the-Rackspace-Public-Cloud</guid>
      <description>

&lt;p&gt;Private Cloud on the Public Cloud? As odd as that sounds, or as inception as it makes you feel (Clouds in clouds?!), I&amp;rsquo;ve found that since downsizing my homelab quite a bit, I&amp;rsquo;ve needed to find other ways to work on and try out various things that exceed the capacity of my laptop. RPC 9 is one of them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I work for Rackspace, and while this post is largely focused around two of our products, I put it out here in the hopes that a) someone will find it useful, and b) it&amp;rsquo;ll help me later.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Rackspace Private Cloud (RPC)&lt;/h2&gt;

&lt;p&gt;Our docs will do it a lot more justice in terms of description than I can, so I encourage you to go &lt;a href=&#34;http://docs.rackspace.com/rpc/api/v9/bk-rpc-installation/content/index.html&#34;&gt;here&lt;/a&gt; and take a few minutes to get familiar.&lt;/p&gt;

&lt;p&gt;A few things I want to point out are related to the architecture of RPC9, specifically:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://docs.rackspace.com/rpc/api/v9/bk-rpc-installation/content/figures/1/a/a/a/rpc-common/figures/rpc9-environment-overview.png&#34; alt=&#34;RPC Infrastructure&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Looking over the diagram, there are a &lt;em&gt;lot&lt;/em&gt; of hosts involved now. 3x Infrastructure nodes, a logging host, n-Compute hosts, deployment hosts, and finally a set of load balancers. This thing is big. Bigger than my laptop that&amp;rsquo;s for sure.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Running Cloud on Cloud&lt;/h2&gt;

&lt;p&gt;Thankfully, however, while it&amp;rsquo;s big, the folks who wrote this provided some OpenStack Heat templates that make setting it up externally much easier. Those can be found &lt;a href=&#34;https://github.com/rcbops/ansible-lxc-rpc/tree/master/scripts&#34;&gt;here.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;To build the cloud on the cloud you&amp;rsquo;ll need the following info &amp;amp; apps installed somewhere you have access to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An &amp;ldquo;heatrc&amp;rdquo; or similar file containing

&lt;ul&gt;
&lt;li&gt;Rackspace Username&lt;/li&gt;
&lt;li&gt;Rackspace API Key&lt;/li&gt;
&lt;li&gt;Endpoint(s) to deploy to&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Python-HeatClient&lt;/li&gt;
&lt;li&gt;An SSH Key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create the &amp;ldquo;heatrc&amp;rdquo; file, start with the below template and then edit as needed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export OS_USERNAME=rackspace_cloud_username
export OS_PASSWORD=rackspace_cloud_password
export OS_TENANT_ID=rackspace_cloud_account_number
export OS_AUTH_URL=https://identity.api.rackspacecloud.com/v2.0/
export HEAT_URL=https://ord.orchestration.api.rackspacecloud.com/v1/${OS_TENANT_ID}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; OS_TENANT_ID is your cloud account number. You can get to this by logging into mycloud.rackspace.com and clicking your account name in the upper right.&lt;/p&gt;

&lt;p&gt;Once you&amp;rsquo;ve created the file and replaced said values, install the Heat client: &lt;code&gt;pip install python-heatclient&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Installing RPC 9 on the Rackspace Public Cloud&lt;/h3&gt;

&lt;p&gt;To kick off the installation, follow these commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl https://raw.githubusercontent.com/rcbops/ansible-lxc-rpc/master/scripts/rpc9.0.0-aio-rax-heat-template.yml &amp;gt; rpc9-rax-heat.yaml

source ./heatrc

heat stack-create RPC9-Stack -f ./rpc9-rax-heat.yaml \
  -P image_name=&amp;quot;Ubuntu 14.04 LTS (Trusty Tahr)&amp;quot; \
  -P ssh_key_name=&amp;quot;lol_ssh_key&amp;quot; \
  -P flavor_name=&amp;quot;8 GB Performance&amp;quot;

+--------------------------------------+------------+--------------------+----------------------+
| id                                   | stack_name | stack_status       | creation_time        |
+--------------------------------------+------------+--------------------+----------------------+
| c2b6c1b0-0098-441d-9999-c778b108a181 | RPC9-Stack | CREATE_IN_PROGRESS | 2014-10-13T15:13:58Z |
+--------------------------------------+------------+--------------------+----------------------+

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This next part takes quite a bit of time to complete and is why we used a performance instance, to make the provision happen just a bit faster. You can keep an eye on it&amp;rsquo;s build status with &lt;code&gt;watch -n 15 heat stack-list&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once it completes, you will need to find out what IP address it has been assigned, to do that, use these commands:&lt;/p&gt;

&lt;p&gt;List the stacks:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heat stack-list
+--------------------------------------+------------+-----------------+----------------------+
| id                                   | stack_name | stack_status    | creation_time        |
+--------------------------------------+------------+-----------------+----------------------+
| c2b6c1b0-0098-441d-9999-c778b108a181 | RPC9-Stack | CREATE_COMPLETE | 2014-10-13T15:13:58Z |
+--------------------------------------+------------+-----------------+----------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List the available outputs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heat output-list RPC9-Stack
+------------------+-------------------------------------------------------+
| output_key       | description                                           |
+------------------+-------------------------------------------------------+
| RPCAIO_password  | The password for all the things.                      |
| RPCAIO_public_ip | The public IP address of the newly configured Server. |
+------------------+-------------------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally show the IP:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ heat output-show RPC9-Stack RPCAIO_public_ip
&amp;quot;127.0.0.100&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post we showed you how to nest the Rackspace Private Cloud installation on the Rackspace Public Cloud. A useful trick for testing it out without having to use &lt;em&gt;ALL&lt;/em&gt; your local resources up.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OpenStack Cookbook 3rd Edition</title>
      <link>http://blog.codybunch.com/posts/2014-10-10-OpenStack-Cookbook-3rd-Edition</link>
      <pubDate>Fri, 10 Oct 2014 00:00:00 UTC</pubDate>
      
      <guid>http://blog.codybunch.com/posts/2014-10-10-OpenStack-Cookbook-3rd-Edition</guid>
      <description>

&lt;p&gt;Oh Oh Oh! The lesson in book writing is that it is both terrible and addictive. That is, right as we wrapped the second edition of the OpenStack Cookbook, I promised myself &amp;ldquo;Never again!&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Now, some number of months later, &lt;a href=&#34;https://twitter.com/itarchitectkev&#34;&gt;Kevin&lt;/a&gt; and myself, we&amp;rsquo;ve chatted a bit, and have decided to go down that road to update the book again. Indeed, we&amp;rsquo;re also looking at bringing &lt;a href=&#34;https://twitter.com/eglute&#34;&gt;Egle&lt;/a&gt; along for the ride this time.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;3rd Edition Highlights&lt;/h2&gt;

&lt;p&gt;The third edition will target either a late Juno or early Kilo release (Hooray Relevancy!). In addition to general updates, were adding or overhauling the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenStack Datacenter Automation&lt;/li&gt;
&lt;li&gt;OpenStack Scaling&lt;/li&gt;
&lt;li&gt;Image Management &amp;amp; Conversion&lt;/li&gt;
&lt;li&gt;More Operations Recipes&lt;/li&gt;
&lt;li&gt;HTTPS!&lt;/li&gt;
&lt;li&gt;OpenStack Heat&lt;/li&gt;
&lt;li&gt;Additional Neutron Services (LBaaS, VPNaaS)&lt;/li&gt;
&lt;li&gt;Using 3rd Party drivers&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>30 Posts in 30 Days</title>
      <link>http://blog.codybunch.com/posts/2014-10-09-30-Posts-in-30-Days</link>
      <pubDate>Thu, 09 Oct 2014 00:00:00 UTC</pubDate>
      
      <guid>http://blog.codybunch.com/posts/2014-10-09-30-Posts-in-30-Days</guid>
      <description>&lt;p&gt;I found this morning I was in a bit of a blogging slump. That is, I&amp;rsquo;d not posted anything in quite a while, even though I have plenty of exciting things going on at the moment. So, with that said, happening across &lt;a href=&#34;http://etherealmind.com/challenge-30-blogs-30-days/&#34;&gt;this post&lt;/a&gt; by Greg Ferro (&lt;a href=&#34;http://twitter.com/@etherealmind&#34;&gt;@etherealmind&lt;/a&gt;), I thought I&amp;rsquo;d jump into the fray.&lt;/p&gt;

&lt;p&gt;I encourage you to do the same.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Currently Reading - Sept 2014</title>
      <link>http://blog.codybunch.com/posts/2014-09-12-Currently-Reading---Sept-2014</link>
      <pubDate>Fri, 12 Sep 2014 00:00:00 UTC</pubDate>
      
      <guid>http://blog.codybunch.com/posts/2014-09-12-Currently-Reading---Sept-2014</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve found overtime my reading habbits have changed from mostly tech books to a fair mix of things, with some things that suprised even me&amp;hellip; business books. o.O? Here&amp;rsquo;s what&amp;rsquo;s currently on my list and in progress, first the boring ones:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Curve-Freeloaders-Superfans-Future-Business-ebook/dp/B00C5R7B6W/ref=sr_1_1_bnp_1_kin?ie=UTF8&amp;amp;qid=1410211612&amp;amp;sr=8-1&amp;amp;keywords=the+curve+how+smart+companies+find+high+value&#34;&gt;The Curve: How Smart Companies Find High-Value Customers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman-ebook/dp/B00555X8OA/ref=sr_1_1_bnp_1_kin?ie=UTF8&amp;amp;qid=1410211622&amp;amp;sr=8-1&amp;amp;keywords=thinking+fast+and+slow&#34;&gt;Thinking, Fast and Slow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Vagrant-Up-Running-Mitchell-Hashimoto-ebook/dp/B00D3VH4IO&#34;&gt;Vagrant: Up and Running&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Art-Learning-Journey-Pursuit-Excellence-ebook/dp/B000QCQ970/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1410546893&amp;amp;sr=1-1&amp;amp;keywords=the+art+of+learning&#34;&gt;The Art of Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/SYSTEMANTICS-SYSTEMS-BIBLE-John-Gall-ebook/dp/B00AK1BIDM/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1410546946&amp;amp;sr=1-1&amp;amp;keywords=systemantics&#34;&gt;Systemantics. The Systems Bible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Essential-Drucker-Collins-Business-Essentials-ebook/dp/B000FC11LK/ref=sr_1_1?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1410546958&amp;amp;sr=1-1&amp;amp;keywords=essential+drucker&#34;&gt;The Essential Drucker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Pragmatism-Other-Writings-Penguin-Classics/dp/0140437355/ref=sr_1_1?ie=UTF8&amp;amp;qid=undefined&amp;amp;sr=8-1&amp;amp;keywords=pragmatism+and+other+essays&#34;&gt;Pragmatism and Other Writings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://markburgess.org/BookOfPromises.pdf&#34;&gt;Book of Promises&lt;/a&gt; Promise Theory!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://arxiv.org/pdf/0810.3294v5.pdf&#34;&gt;A static Theory of Promises&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then on the more fun side:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Brightness-Reef-Uplift-Trilogy-Book/dp/0553573306/ref=la_B000APAXV6_1_7?s=books&amp;amp;ie=UTF8&amp;amp;qid=1410547103&amp;amp;sr=1-7&#34;&gt;Brightness Reef&lt;/a&gt; and the rest of said series.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Gardens-Moon-Book-Malazan-Fallen-ebook/dp/B002KYHZLQ/ref=tmm_kin_swatch_0?_encoding=UTF8&amp;amp;sr=1-3-fkmr0&amp;amp;qid=1410547192&#34;&gt;Gardens of the Moon: Book 1 of The Malazan Book of the Fallen&lt;/a&gt; and the rest of that series.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Geek-Dads-Guide-Weekend-Fun-ebook/dp/B004RKXO16/ref=sr_1_2?s=digital-text&amp;amp;ie=UTF8&amp;amp;qid=1410547255&amp;amp;sr=1-2&amp;amp;keywords=geek+dad&#34;&gt;Geek Dad&amp;rsquo;s Weekend Fun&lt;/a&gt;, Doing a project every weekend or so.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Echopraxia-Peter-Watts-ebook/dp/B00IHCBDJ0/ref=tmm_kin_swatch_0?_encoding=UTF8&amp;amp;sr=&amp;amp;qid=&#34;&gt;Echopraxia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MariaDB With Galera on Vagrant</title>
      <link>http://blog.codybunch.com/posts/2014-09-10-MariaDB-With-Galera-on-Vagrant</link>
      <pubDate>Wed, 10 Sep 2014 00:00:00 UTC</pubDate>
      
      <guid>http://blog.codybunch.com/posts/2014-09-10-MariaDB-With-Galera-on-Vagrant</guid>
      <description>

&lt;p&gt;Found myself in some training this last week using MariaDB, and being that I like to get a bit more hands on than most, using the class provided lab environment wasn&amp;rsquo;t going to cut it. This meant wrapping some scripting into a Vagrant environment so I could reliably reporduce the three node lab.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;You&amp;rsquo;ll need Vagrant and Git. It&amp;rsquo;s also preferred that you have vagrant-cachier installed. You should have vagrant-cachier anyways, but alas, that is not for right now. Once you have these out of the way, do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/bunchc/mariadb-galera-vagrant.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd mariadb-galera-vagrant&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vagrant up&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Validating the Cluster&lt;/h2&gt;

&lt;p&gt;After a few minutes, you should be able to log into any of the nodes. Specifically, node-01 will be used to &amp;lsquo;bootstrap&amp;rsquo; the cluster, the other two nodes will join from there.&lt;/p&gt;

&lt;p&gt;To validate the cluster:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant ssh mariadb-02
sudo su -
mysql -uroot
SHOW GLOBAL STATUS LIKE &#39;wsrep%&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should be able to do the above from any of the nodes in the cluster.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Raspberry Pi as PXE Server</title>
      <link>http://blog.codybunch.com/posts/2014-08-19-Raspberry-Pi-as-PXE-Server</link>
      <pubDate>Tue, 19 Aug 2014 00:00:00 UTC</pubDate>
      
      <guid>http://blog.codybunch.com/posts/2014-08-19-Raspberry-Pi-as-PXE-Server</guid>
      <description>

&lt;p&gt;As I start to move from OpenStack Compute Cells in Devstack to OpenStack Compute Cells physicall, I needed to re-think my homelab some. It had been running some variation of vsphere and the OpenStack Cookbook work from various projects prior. Basically, it was a Hodor of a home lab.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Hodor!&lt;/h2&gt;

&lt;p&gt;Rather than lose a bit of hardware to foreman, or one of the new razor forks (I may still go this route later), I decided instead to pound a Raspberry Pi into service. To turn the rPI into a usable provisioning server, I did the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Provision a 16gb card with Raspbian&lt;/li&gt;
&lt;li&gt;Beat Networking Into Submission&lt;/li&gt;
&lt;li&gt;Setup IP Tables for Nat&lt;/li&gt;
&lt;li&gt;Configure DHCP, PXE, TFTP, etc&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We&amp;rsquo;ll skip step 1 as the folks at &lt;a href=&#34;http://www.raspberrypi.org/&#34;&gt;raspberrypi.org&lt;/a&gt; cover that pretty well already.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Beat Networking Into Submission&lt;/h2&gt;

&lt;p&gt;So the rPI does some auto-hotplugging bits that can cause you some issues if you try to use both wifi and ethernet at the same time. If you&amp;rsquo;re not expecting them, well&amp;hellip; let&amp;rsquo;s just say I spent too long trying to solve before googling the problem. Here&amp;rsquo;s what my networking config files look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cat /etc/network/interfaces
auto lo
iface lo inet loopback

auth eth0
allow-hotplug eth0
iface eth0 inet static
    address 172.16.0.1
    netmask 255.255.255.0

auto wlan0
allow-hotplug wlan0
iface wlan0 inet static
wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
    address 10.0.1.15
    netmask 255.255.255.0
    broadcast 10.0.1.255
    gateway 10.0.1.1

iface default inet dhcp

# cat /etc/default/ifplugd
INTERFACES=&amp;quot;eth0&amp;quot;
HOTPLUG_INTERFACES=&amp;quot;eth0&amp;quot;
ARGS=&amp;quot;-q -f -u0 -d10 -w -I&amp;quot;
SUSPEND_ACTION=&amp;quot;stop&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once you have that, reboot the rPI and you should be good to go.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Setup IP Tables for NAT&lt;/h2&gt;

&lt;p&gt;This is also pretty well straight forward, but for some reason I end up googling it each time. Here it is for reference:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# NAT
iptables --table nat --append POSTROUTING --out-interface wlan0 -j MASQUERADE
iptables --append FORWARD --in-interface eth0 -j ACCEPT
iptables-save | sudo tee /etc/iptables.conf
iptables-restore &amp;lt; /etc/iptables.conf
sh -c &amp;quot;echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward&amp;quot;
sed -i &amp;quot;s/exit 0/iptables-restore &amp;lt; \/etc\/\iptables.conf \nexit 0/g&amp;quot; /etc/rc.local
sed -i &amp;quot;s/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/g&amp;quot; /etc/sysctl.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Configure DHCP, PXE, TFTP, etc&lt;/h2&gt;

&lt;p&gt;This one is a bit more involved, but is all done via the following bash commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MY_IP=$(ifconfig eth0 | awk &#39;/inet addr/ {split ($2,A,&amp;quot;:&amp;quot;); print A[2]}&#39;)

# Install the things
sudo apt-get install -y dnsmasq nfs-kernel-server syslinux-common

# Setup some shell folders
sudo mkdir -p /tftpboot/images/ubuntu/14.04/amd64
sudo cp -r /usr/lib/syslinux/* /tftpboot/
sudo mkdir -p /tftpboot/pxelinux.cfg/Ubuntu
sudo cp /usr/lib/syslinux/vesamenu.c32 /tftpboot/

# Create a pxe.conf file
sudo cat &amp;gt; /tftpboot/pxelinux.cfg/pxe.conf &amp;lt;&amp;lt;EOF
MENU TITLE  PXE Server 
NOESCAPE 1
ALLOWOPTIONS 1
PROMPT 0
MENU WIDTH 80
MENU ROWS 14
MENU TABMSGROW 24
MENU MARGIN 10
MENU COLOR border               30;44      #ffffffff #00000000 std
EOF

# Create our PXE Menu
sudo cat &amp;gt; /tftpboot/pxelinux.cfg/default &amp;lt;&amp;lt;EOF
DEFAULT vesamenu.c32 
TIMEOUT 600
ONTIMEOUT BootLocal
PROMPT 0
MENU INCLUDE pxelinux.cfg/pxe.conf
NOESCAPE 1
LABEL BootLocal
        localboot 0
        TEXT HELP
        Boot to local hard disk
        ENDTEXT
MENU BEGIN Ubuntu
MENU TITLE Ubuntu 
        LABEL Previous
        MENU LABEL Previous Menu
        TEXT HELP
        Return to previous menu
        ENDTEXT
        MENU EXIT
        MENU SEPARATOR
        MENU INCLUDE Ubuntu/Ubuntu.menu
MENU END
EOF

sudo cat &amp;gt; /tftpboot/pxelinux.cfg/Ubuntu/Ubuntu.menu &amp;lt;&amp;lt;EOF
LABEL 2
        MENU LABEL Ubuntu 14.04 (64-bit)
        kernel tftp://$MY_IP/images/ubuntu/14.04/amd64/install/netboot/ubuntu-installer/amd64/linux
        append auto=true priority=critical vga=788 initrd=tftp://$MY_IP/images/ubuntu/14.04/amd64/install/netboot/ubuntu-installer/amd64/initrd.gz locale=en_US.UTF-8 kbd-chooser/method=us netcfg/choose_interface=auto url=tftp://172.16.11.250/preseed.cfg
        TEXT HELP
        Boot the Ubuntu 14.04 64-bit DVD
        ENDTEXT
EOF

# Configure dnsmasq for tftp &amp;amp; dhcp
sudo cat &amp;gt;&amp;gt; /etc/dnsmasq.conf &amp;lt;&amp;lt;EOF
server=$MY_IP@eth0
interface=eth0
no-dhcp-interface=wlan0
dhcp-range=172.16.0.10,172.16.0.253,12h
dhcp-boot=pxelinux.0
pxe-service=x86PC,&amp;quot;Booting from Network...&amp;quot;,pxelinux
enable-tftp
tftp-root=/tftpboot
dhcp-boot=pxelinux.0,servername,$MY_IP
EOF
sudo service dnsmasq restart

# Get 14.04 and extract the needful
wget -O ~/ubuntu-14.04-server-amd64.iso http://mirror.anl.gov/pub/ubuntu-iso/CDs/trusty/ubuntu-14.04.1-server-amd64.iso

sudo mkdir /mnt/loop
sudo mount -o loop -t iso9660 ~/ubuntu-14.04-server-amd64.iso /mnt/loop
sudo cp -R /mnt/loop/* /tftpboot/images/ubuntu/14.04/amd64
sudo cp -R /mnt/loop/.disk /tftpboot/images/ubuntu/14.04/amd64
sudo umount /mnt/loop

# Get a generic preseed
wget -O /tftpboot/preseed.cfg https://help.ubuntu.com/lts/installation-guide/example-preseed.txt

# Setup NFS mounts
echo &amp;quot;
/tftpboot/images/ubuntu/    *(ro,sync,no_subtree_check)&amp;quot; | sudo tee -a /etc/exports

# Enable RPCBind, NFS, and restart them
update-rc.d rpcbind enable &amp;amp;&amp;amp; update-rc.d nfs-common enable
service rpcbind start
service nfs-kernel-server restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The commands themselves are commented pretty well. Generically what they do is install dnsmasq for dhcp &amp;amp; tftp. From there we download and extract all the things from the ISO that we&amp;rsquo;ll need, configure some menus, download a basic preseed, and restart some services.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post, we took a lowly Raspberry Pi and indentured it into some network servitude as a pxe / tftp server. We did this by installing and configuring dnsmasq for tftp and dhcp. Additionally we set up some fancy pxeboot menus and configured them to boot locally as a priority and to the network in times of need. Finally, we pulled down an Ubuntu 14.04 image and generic preseed file to use for automatic installs.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://raspberrypi.stackexchange.com/questions/8851/setting-up-wifi-and-ethernet&#34;&gt;http://raspberrypi.stackexchange.com/questions/8851/setting-up-wifi-and-ethernet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://it-joe.com/howtos/pxe.php&#34;&gt;http://it-joe.com/howtos/pxe.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://wernerstrydom.com/2014/05/25/automatically-installing-ubuntu-server-14-04-tftp/&#34;&gt;http://wernerstrydom.com/&lt;sup&gt;2014&lt;/sup&gt;&amp;frasl;&lt;sub&gt;05&lt;/sub&gt;/25/automatically-installing-ubuntu-server-14-04-tftp/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Vagrant and Hanlon (The other Razor Fork)</title>
      <link>http://blog.codybunch.com/posts/2014-08-15-Vagrant-and-Hanlon-The-other-Razor-Fork</link>
      <pubDate>Fri, 15 Aug 2014 00:00:00 UTC</pubDate>
      
      <guid>http://blog.codybunch.com/posts/2014-08-15-Vagrant-and-Hanlon-The-other-Razor-Fork</guid>
      <description>

&lt;p&gt;You may or may not know that Razor, the bare-metal lifecycle tool, has forked from its original bits. This is a good thing, but it&amp;rsquo;s still really early days on the new forks, so we&amp;rsquo;ll see ultimately what plays out.&lt;/p&gt;

&lt;p&gt;The Puppet-Labs &amp;ldquo;Razor-Server&amp;rdquo; fork can be found &lt;a href=&#34;https://github.com/puppetlabs/razor-server&#34;&gt;here&lt;/a&gt;. If you want to work with it, or test it locally, you can use the bits written by Egle &lt;a href=&#34;http://anystacker.com/2014/01/vagrant-up-razor-server/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hanlon, the CSC fork &lt;a href=&#34;https://github.com/csc/Hanlon&#34;&gt;here&lt;/a&gt;, is being perused by Tom McSweeney who helped get the original razor off the ground.&lt;/p&gt;

&lt;p&gt;To help me work with it and contribute some, I&amp;rsquo;ve built a small Vagrant environment (largely basd on the Vagrant environment for &amp;lsquo;the other&amp;rsquo; razor.).&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Vagrant Up Hanlon&lt;/h2&gt;

&lt;p&gt;To get started, clone the repo and vagrant up, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/bunchc/vagrant-hanlon.git
cd vagrant-hanlon
vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What this does during the vagrant up process is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install dnsmasq&lt;/li&gt;
&lt;li&gt;Configure IPtables for NAT&lt;/li&gt;
&lt;li&gt;Installs Mongodb&lt;/li&gt;
&lt;li&gt;Installs Java&lt;/li&gt;
&lt;li&gt;Installs RBENV&lt;/li&gt;
&lt;li&gt;Installs both jruby and ruby 1.9.3&lt;/li&gt;
&lt;li&gt;Downloads Hanlon&lt;/li&gt;
&lt;li&gt;Starts Puma (to run Hanlon)&lt;/li&gt;
&lt;li&gt;Pulls down a few images to add to Hanlon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once you have Hanlon running, command wise it works very similar to the old Razor. That is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hanlon node
hanlon policy
hanlon image
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;In this post, you cloned and started to work with Hanlon, one of the derivatives of the Razor bare-metal provisioning framework.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Updated Blog / Markdown workflow</title>
      <link>http://blog.codybunch.com/posts/2014-08-14-Updated-Blog--Markdown-workflow</link>
      <pubDate>Thu, 14 Aug 2014 00:00:00 UTC</pubDate>
      
      <guid>http://blog.codybunch.com/posts/2014-08-14-Updated-Blog--Markdown-workflow</guid>
      <description>

&lt;p&gt;A while ago I posted about my markdown &lt;a href=&#34;http://openstack.prov12n.com/my-markdown-workflow-for-now/&#34;&gt;workflow&lt;/a&gt;. While that workflow was decent and worked for a goodly little while, it left quite a bit to be desired. Specifically, I the posting process into Wordpress was cumbersome at best.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;A New Blog Engine&lt;/h2&gt;

&lt;p&gt;Like I said above, working with Wordpress and markdown was cumbersome and then some. So it was time for something new. At first I was going to use similar to &lt;a href=&#34;https://github.com/chalupaul/chalupaul.github.io/&#34;&gt;this&lt;/a&gt;, which is actually what is in use on the &lt;a href=&#34;http://openstackcookbook.com/&#34;&gt;openstackcookbook.com&lt;/a&gt; site. It has the following benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Posts are written in Markdown&lt;/li&gt;
&lt;li&gt;Integrated with gh-pages&lt;/li&gt;
&lt;li&gt;Straighforward publishing process &lt;code&gt;git push origin master&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was &lt;em&gt;almost&lt;/em&gt; what I needed. In the end I went with &lt;a href=&#34;http://hugo.spf13.com/&#34;&gt;Hugo&lt;/a&gt;. What Hugo added was some pluggable themes and templates. Also the ability to run locally before pushing to github.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To setup Hugo on github, use &lt;a href=&#34;http://hugo.spf13.com/tutorials/github_pages_blog&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Current Workflow&lt;/h2&gt;

&lt;p&gt;My current workflow needed some help then. I kept the same sublime text plugins, that is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MarkdownEditing

&lt;ul&gt;
&lt;li&gt;This has a number of really handy keyboard bindings. It also has some decent highlighting and what not.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Markdown Preview

&lt;ul&gt;
&lt;li&gt;This one allows me to go from Markdown into what it’ll look like on the web.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Markdown TOC

&lt;ul&gt;
&lt;li&gt;This lets me go from a basic set of sections and files into a more full fledged table of contents.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, to create a new post, I modified the Rakefile found &lt;a href=&#34;https://github.com/chalupaul/chalupaul.github.io/blob/master/_posts/Rakefile&#34;&gt;here&lt;/a&gt;, to look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;fileutils&#39;
task :post do
    title = ENV[&#39;title&#39;] || &amp;quot;new-post&amp;quot;
    tags = ENV[&#39;tags&#39;] || &#39;&#39;
    make_img_dir = ENV[&#39;imgdir&#39;] || false
    date = (ENV[&#39;date&#39;] ? Time.parse(ENV[&#39;date&#39;]) : Time.now).strftime(&#39;%Y-%m-%d&#39;)
    filename = File.join(&#39;.&#39;, &amp;quot;#{Time.now.strftime(&#39;%Y-%m-%d&#39;)}-#{title.strip.gsub(&#39; &#39;, &#39;-&#39;).gsub(/[^\w-]/, &#39;&#39;)}.md&amp;quot;)
    open(filename, &#39;w&#39;) do |post|
        post.puts &amp;quot;---&amp;quot;
        post.puts &amp;quot;title: \&amp;quot;#{title}\&amp;quot;&amp;quot;
        post.puts &amp;quot;date: #{Time.now.strftime(&#39;%Y-%m-%d&#39;)}&amp;quot;
        post.puts &amp;quot;categories: &amp;quot;
        post.puts &amp;quot;---&amp;quot;
        post.puts &amp;quot;\nYour content here.&amp;quot;
        if make_img_dir
            img_dir = File.basename(filename.chomp(File.extname(filename)))
            FileUtils.mkdir_p(&amp;quot;../images/posts/#{img_dir}&amp;quot;)
            post.puts &amp;quot;\n&amp;quot; * 5
            post.puts &amp;quot;[imgdir]: /images/posts/#{img_dir}/&amp;quot;
        end
    end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So creating a new post goes like this:
bunchc: blog/content/posts$ rake post title=&amp;ldquo;Title Here&amp;rdquo;&lt;/p&gt;

&lt;p&gt;In turn, that creates a YYYY-MM-DD-Title-Here.md file for editing in sublime. It also adds the metadata section at the top of the file for me:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Updated Blog / Markdown workflow&amp;quot;
date: 2014-08-14
categories: 
---
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From there, I write the file, save the file, and run &lt;code&gt;./deploy.sh&lt;/code&gt; from the Hugo installer linked earlier. That handles all the pushing and bits to git.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;The gist of it is, Wordpress was a bit much and a bit heavy for what I needed. Hugo, Markdown, and GitHub Pages gave me a streamlined process that looks decent for posting.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Multi-Node Devstack with Neutron and Cells</title>
      <link>http://blog.codybunch.com/posts/2014-08-14-Multi-Node-Devstack-with-Neutron-and-Cells</link>
      <pubDate>Thu, 14 Aug 2014 00:00:00 UTC</pubDate>
      
      <guid>http://blog.codybunch.com/posts/2014-08-14-Multi-Node-Devstack-with-Neutron-and-Cells</guid>
      <description>

&lt;p&gt;OpenStack Cells allow you to break up Nova into smaller domains. In turn, this allows for a number of interesting things. Not the least of which is scale.&lt;/p&gt;

&lt;p&gt;From the OpenStack.org docs: &lt;strong&gt;Note&lt;/strong&gt; &lt;em&gt;I&amp;rsquo;ve added the bold on some important points.&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cells functionality enables you to scale an OpenStack Compute cloud in a more distributed fashion without having to use complicated technologies like database and message queue clustering. It supports very large deployments.&lt;/p&gt;

&lt;p&gt;When this functionality is enabled, the hosts in an OpenStack Compute cloud are partitioned into groups called cells. Cells are configured as a tree. The top-level cell should have a host that runs a nova-api service, but no nova-compute services. Each child cell should run all of the typical nova-* services in a regular Compute cloud except for nova-api. &lt;strong&gt;You can think of cells as a normal Compute deployment in that each cell has its own database server and message queue broker.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, in addition to breaking down at physical boundaries or failure domains, you can break nova-compute into smaller chunks based on DB and MQ scaling limits.&lt;/p&gt;

&lt;p&gt;However, not all of us have multi-geo hundred plus node compute labs to play with&amp;hellip; so how do we test out this functionality before hand? Devstack!&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;tl;dr - &lt;code&gt;git clone https://github.com/bunchc/devstack-cells.git; cd devstack-cells; vagrant up&lt;/code&gt;, and go to &amp;ldquo;Configuring and Creating Cells&amp;rdquo;&lt;/p&gt;

&lt;p&gt;To get started, you&amp;rsquo;ll need the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;virtualbox (fusion or workstation work just as well)&lt;/li&gt;
&lt;li&gt;a minimum of two Ubuntu 14.04 VM with:

&lt;ul&gt;
&lt;li&gt;About 2GB ram&lt;/li&gt;
&lt;li&gt;2x networks

&lt;ul&gt;
&lt;li&gt;eth0 = NAT&lt;/li&gt;
&lt;li&gt;eth1 = host only&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Both Nodes&lt;/h3&gt;

&lt;p&gt;Once you have that taken care of, on each node we need to create a stack user:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo adduser --disabled-password --gecos &amp;quot;&amp;quot; stack
echo &amp;quot;stack ALL=(ALL) NOPASSWD: ALL&amp;quot; &amp;gt;&amp;gt; /etc/sudoers
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;Parent Node&lt;/h3&gt;

&lt;p&gt;Time to Download devstack:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo su - stack
git clone -b stable/icehouse https://github.com/openstack-dev/devstack 
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note the sudo command. Everything from this point is done as stack&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, let&amp;rsquo;s make the local.conf file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;
[[local|localrc]]
ADMIN_PASSWORD=$ADMIN_PASSWORD
DATABASE_PASSWORD=$ADMIN_PASSWORD
RABBIT_PASSWORD=$ADMIN_PASSWORD
SERVICE_PASSWORD=$ADMIN_PASSWORD
SERVICE_TOKEN=a682f596-76f3-11e3-b3b2-e716f9080d50

GIT_BASE=${GIT_BASE:-https://git.openstack.org}

# Cells!
ENABLED_SERVICES+=,n-cell,n-api-meta
DISABLED_SERVICE+=,n-cpu,n-net,n-sch

# Neutron - Networking Service
# If Neutron is not declared the old good nova-network will be used
ENABLED_SERVICES+=,q-svc,q-agt,q-dhcp,q-l3,q-meta,neutron,q-lbaas,q-vpn,q-fwaas

# Neutron Stuff
OVS_VLAN_RANGES=RegionOne:1:4000
OVS_ENABLE_TUNNELING=False

## Images
# 32bit image (~660MB)
IMAGE_URLS+=&amp;quot;,http://fedorapeople.org/groups/heat/prebuilt-jeos-images/F19-i386-cfntools.qcow2&amp;quot;
# 64bit image (~640MB)
IMAGE_URLS+=&amp;quot;,http://fedorapeople.org/groups/heat/prebuilt-jeos-images/F19-x86_64-cfntools.qcow2&amp;quot;
IMAGE_URLS+=&amp;quot;,http://mirror.chpc.utah.edu/pub/fedora/linux/releases/20/Images/x86_64/Fedora-x86_64-20-20131211.1-sda.qcow2&amp;quot;
IMAGE_URLS+=&amp;quot;,http://launchpad.net/cirros/trunk/0.3.0/+download/cirros-0.3.0-x86_64-uec.tar.gz&amp;quot;

# Output
LOGFILE=/opt/stack/logs/stack.sh.log
VERBOSE=True
LOG_COLOR=False
SCREEN_LOGDIR=/opt/stack/logs
&amp;quot; | tee -a /home/stack/devstack/local.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important bit for cells in this file are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ENABLED_SERVICES+=,n-cell,n-api-meta
DISABLED_SERVICE+=,n-cpu,n-net,n-sch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This enables the cell service, and the nova-api metadata service. It then disables compute, nova-networking, and the scheduler. Those tasks will be handled on the children.&lt;/p&gt;

&lt;p&gt;With that out of the way run &lt;code&gt;./stack.sh&lt;/code&gt; and grab a coffee. When it completes, add the following to &lt;code&gt;/etc/nova/nova.conf&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[cells]
enable=True
name=api
cell_type=api
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, restart the n-api serivice.&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Child Node&lt;/h3&gt;

&lt;p&gt;Time to Download devstack:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo su - stack
git clone -b stable/icehouse https://github.com/openstack-dev/devstack 
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Note the sudo command. Everything from this point is done as stack&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Next, on the child node, we create a local.conf file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd devstack
echo &amp;quot;
[[local|localrc]]
ADMIN_PASSWORD=$ADMIN_PASSWORD
DATABASE_PASSWORD=$ADMIN_PASSWORD
RABBIT_PASSWORD=$ADMIN_PASSWORD
SERVICE_PASSWORD=$ADMIN_PASSWORD
SERVICE_TOKEN=a682f596-76f3-11e3-b3b2-e716f9080d50

HOST_IP=&amp;lt;ipaddres of eth0&amp;gt;
SERVICE_HOST=&amp;lt;ip address of controllers eth0&amp;gt;
MYSQL_HOST=$SERVICE_HOST
RABBIT_HOST=$SERVICE_HOST
Q_HOST=$SERVICE_HOST
GLANCE_HOSTPORT=$SERVICE_HOST:9292

GIT_BASE=${GIT_BASE:-https://git.openstack.org}

# Cells!
ENABLED_SERVICES+=,n-cell
DISABLED_SERVICE+=,n-api,key,g-api

# Neutron - Networking Service
# If Neutron is not declared the old good nova-network will be used
ENABLED_SERVICES+=,q-svc,q-agt,q-dhcp,q-l3,q-meta,neutron,q-lbaas,q-vpn,q-fwaas

# Neutron Stuff
OVS_VLAN_RANGES=RegionOne:1:4000
OVS_ENABLE_TUNNELING=False

# Output
LOGFILE=/opt/stack/logs/stack.sh.log
VERBOSE=True
LOG_COLOR=False
SCREEN_LOGDIR=/opt/stack/logs
&amp;quot; | tee -a /home/stack/devstack/local.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The important bit for cells is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ENABLED_SERVICES+=,n-cell
DISABLED_SERVICE+=,n-api,key,g-api
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This enables the cell service and turns of keystone along with nova-api and glance-api services. Those in turn will be handled by the parent.&lt;/p&gt;

&lt;p&gt;Next, run &lt;code&gt;./stack.sh&lt;/code&gt; and grab a coffee. When it completes, add the following to &lt;code&gt;/etc/nova/nova.conf&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[cells]
enable=True
name=cell1
cell_type=comput
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Configuring and Creating Cells&lt;/h2&gt;

&lt;p&gt;Ok, what happened above was we got two nodes up and running and ready to go with Devstack and the prerequsite services for cells. Now we actually have to actuall make the cells. To do that:&lt;/p&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;Parent&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;nova-manage cell create --name=cell1 --cell_type=child --username=guest --password=password --hostname=&amp;lt;child ip&amp;gt; --port=5672 --virtual_host=/ --woffset=1.0 --wscale=1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in screen, find the n-cell-* services and restart them.&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;Child&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;nova-manage cell create --name=parent --cell_type=parent --username=guest --password=password --hostname=&amp;lt;parent ip&amp;gt; --port=5672 --virtual_host=/ --woffset=1.0 --wscale=1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in screen, find the n-cell-* services and restart them.&lt;/p&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this post, we created two virtual machines, installed Devstack while enabling nova-cells. Finally, we actually configured the cells to talk to one another. This post was largely an amalgamation of two other posts highlighted in the resources section&lt;/p&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openlystacking.blogspot.com/2013/07/creating-cell-environment-using-devstack.html&#34;&gt;http://openlystacking.blogspot.com/&lt;sup&gt;2013&lt;/sup&gt;&amp;frasl;&lt;sub&gt;07&lt;/sub&gt;/creating-cell-environment-using-devstack.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.xlcloud.org/bin/view/Blog/Devstack+with+Quantum+in+a+multi-node+configuration?language=en&#34;&gt;http://www.xlcloud.org/bin/view/Blog/Devstack+with+Quantum+in+a+multi-node+configuration?language=en&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Linkdump Bare-Metal Edition</title>
      <link>http://blog.codybunch.com/posts/2014-08-13-Linkdump-Bare-Metal-Edition</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 UTC</pubDate>
      
      <guid>http://blog.codybunch.com/posts/2014-08-13-Linkdump-Bare-Metal-Edition</guid>
      <description>&lt;p&gt;Here goes the first post on the Hugo platform on the github blog. Some links I had to close out as I consolidated memory to fire up a multi-devstack.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://theforeman.org/manuals/1.5/quickstart_guide.html&#34;&gt;http://theforeman.org/manuals/1.5/quickstart_guide.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/theforeman/foreman_discovery&#34;&gt;https://github.com/theforeman/foreman_discovery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cobblerd.org/&#34;&gt;http://www.cobblerd.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ma.ttwagner.com/bare-metal-deploys-with-devstack-and-ironic/&#34;&gt;http://ma.ttwagner.com/bare-metal-deploys-with-devstack-and-ironic/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>